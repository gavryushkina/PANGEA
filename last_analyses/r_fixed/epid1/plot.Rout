
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=632, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=553, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=592, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1704674
[1] 51.14021
[1] 0.3409347
[1] 51.14021
[1] 0.5114021
[1] 51.14021
[1] 0.6818694
[1] 51.14021
[1] 0.8523368
[1] 51.14021
[1] 1.022804
[1] 51.14021
[1] 1.193271
[1] 51.14021
[1] 1.363739
[1] 51.14021
[1] 1.534206
[1] 51.14021
[1] 1.704674
[1] 51.14021
[1] 1.875141
[1] 51.14021
[1] 2.045608
[1] 51.14021
[1] 2.216076
[1] 51.14021
[1] 2.386543
[1] 51.14021
[1] 2.55701
[1] 51.14021
[1] 2.727478
[1] 51.14021
[1] 2.897945
[1] 51.14021
[1] 3.068412
[1] 51.14021
[1] 3.23888
[1] 51.14021
[1] 3.409347
[1] 51.14021
[1] 3.579814
[1] 51.14021
[1] 3.750282
[1] 51.14021
[1] 3.920749
[1] 51.14021
[1] 4.091217
[1] 51.14021
[1] 4.261684
[1] 51.14021
[1] 4.432151
[1] 51.14021
[1] 4.602619
[1] 51.14021
[1] 4.773086
[1] 51.14021
[1] 4.943553
[1] 51.14021
[1] 5.114021
[1] 51.14021
[1] 5.284488
[1] 51.14021
[1] 5.454955
[1] 51.14021
[1] 5.625423
[1] 51.14021
[1] 5.79589
[1] 51.14021
[1] 5.966357
[1] 51.14021
[1] 6.136825
[1] 51.14021
[1] 6.307292
[1] 51.14021
[1] 6.47776
[1] 51.14021
[1] 6.648227
[1] 51.14021
[1] 6.818694
[1] 51.14021
[1] 6.989162
[1] 51.14021
[1] 7.159629
[1] 51.14021
[1] 7.330096
[1] 51.14021
[1] 7.500564
[1] 51.14021
[1] 7.671031
[1] 51.14021
[1] 7.841498
[1] 51.14021
[1] 8.011966
[1] 51.14021
[1] 8.182433
[1] 51.14021
[1] 8.3529
[1] 51.14021
[1] 8.523368
[1] 51.14021
[1] 8.693835
[1] 51.14021
[1] 8.864303
[1] 51.14021
[1] 9.03477
[1] 51.14021
[1] 9.205237
[1] 51.14021
[1] 9.375705
[1] 51.14021
[1] 9.546172
[1] 51.14021
[1] 9.716639
[1] 51.14021
[1] 9.887107
[1] 51.14021
[1] 10.05757
[1] 51.14021
[1] 10.22804
[1] 51.14021
[1] 10.39851
[1] 51.14021
[1] 10.56898
[1] 51.14021
[1] 10.73944
[1] 51.14021
[1] 10.90991
[1] 51.14021
[1] 11.08038
[1] 51.14021
[1] 11.25085
[1] 51.14021
[1] 11.42131
[1] 51.14021
[1] 11.59178
[1] 51.14021
[1] 11.76225
[1] 51.14021
[1] 11.93271
[1] 51.14021
[1] 12.10318
[1] 51.14021
[1] 12.27365
[1] 51.14021
[1] 12.44412
[1] 51.14021
[1] 12.61458
[1] 51.14021
[1] 12.78505
[1] 51.14021
[1] 12.95552
[1] 51.14021
[1] 13.12599
[1] 51.14021
[1] 13.29645
[1] 51.14021
[1] 13.46692
[1] 51.14021
[1] 13.63739
[1] 51.14021
[1] 13.80786
[1] 51.14021
[1] 13.97832
[1] 51.14021
[1] 14.14879
[1] 51.14021
[1] 14.31926
[1] 51.14021
[1] 14.48973
[1] 51.14021
[1] 14.66019
[1] 51.14021
[1] 14.83066
[1] 51.14021
[1] 15.00113
[1] 51.14021
[1] 15.17159
[1] 51.14021
[1] 15.34206
[1] 51.14021
[1] 15.51253
[1] 51.14021
[1] 15.683
[1] 51.14021
[1] 15.85346
[1] 51.14021
[1] 16.02393
[1] 51.14021
[1] 16.1944
[1] 51.14021
[1] 16.36487
[1] 51.14021
[1] 16.53533
[1] 51.14021
[1] 16.7058
[1] 51.14021
[1] 16.87627
[1] 51.14021
[1] 17.04674
[1] 51.14021
[1] 17.2172
[1] 51.14021
[1] 17.38767
[1] 51.14021
[1] 17.55814
[1] 51.14021
[1] 17.72861
[1] 51.14021
[1] 17.89907
[1] 51.14021
[1] 18.06954
[1] 51.14021
[1] 18.24001
[1] 51.14021
[1] 18.41047
[1] 51.14021
[1] 18.58094
[1] 51.14021
[1] 18.75141
[1] 51.14021
[1] 18.92188
[1] 51.14021
[1] 19.09234
[1] 51.14021
[1] 19.26281
[1] 51.14021
[1] 19.43328
[1] 51.14021
[1] 19.60375
[1] 51.14021
[1] 19.77421
[1] 51.14021
[1] 19.94468
[1] 51.14021
[1] 20.11515
[1] 51.14021
[1] 20.28562
[1] 51.14021
[1] 20.45608
[1] 51.14021
[1] 20.62655
[1] 51.14021
[1] 20.79702
[1] 51.14021
[1] 20.96748
[1] 51.14021
[1] 21.13795
[1] 51.14021
[1] 21.30842
[1] 51.14021
[1] 21.47889
[1] 51.14021
[1] 21.64935
[1] 51.14021
[1] 21.81982
[1] 51.14021
[1] 21.99029
[1] 51.14021
[1] 22.16076
[1] 51.14021
[1] 22.33122
[1] 51.14021
[1] 22.50169
[1] 51.14021
[1] 22.67216
[1] 51.14021
[1] 22.84263
[1] 51.14021
[1] 23.01309
[1] 51.14021
[1] 23.18356
[1] 51.14021
[1] 23.35403
[1] 51.14021
[1] 23.5245
[1] 51.14021
[1] 23.69496
[1] 51.14021
[1] 23.86543
[1] 51.14021
[1] 24.0359
[1] 51.14021
[1] 24.20636
[1] 51.14021
[1] 24.37683
[1] 51.14021
[1] 24.5473
[1] 51.14021
[1] 24.71777
[1] 51.14021
[1] 24.88823
[1] 51.14021
[1] 25.0587
[1] 51.14021
[1] 25.22917
[1] 51.14021
[1] 25.39964
[1] 51.14021
[1] 25.5701
[1] 51.14021
[1] 25.74057
[1] 51.14021
[1] 25.91104
[1] 51.14021
[1] 26.08151
[1] 51.14021
[1] 26.25197
[1] 51.14021
[1] 26.42244
[1] 51.14021
[1] 26.59291
[1] 51.14021
[1] 26.76337
[1] 51.14021
[1] 26.93384
[1] 51.14021
[1] 27.10431
[1] 51.14021
[1] 27.27478
[1] 51.14021
[1] 27.44524
[1] 51.14021
[1] 27.61571
[1] 51.14021
[1] 27.78618
[1] 51.14021
[1] 27.95665
[1] 51.14021
[1] 28.12711
[1] 51.14021
[1] 28.29758
[1] 51.14021
[1] 28.46805
[1] 51.14021
[1] 28.63852
[1] 51.14021
[1] 28.80898
[1] 51.14021
[1] 28.97945
[1] 51.14021
[1] 29.14992
[1] 51.14021
[1] 29.32039
[1] 51.14021
[1] 29.49085
[1] 51.14021
[1] 29.66132
[1] 51.14021
[1] 29.83179
[1] 51.14021
[1] 30.00225
[1] 51.14021
[1] 30.17272
[1] 51.14021
[1] 30.34319
[1] 51.14021
[1] 30.51366
[1] 51.14021
[1] 30.68412
[1] 51.14021
[1] 30.85459
[1] 51.14021
[1] 31.02506
[1] 51.14021
[1] 31.19553
[1] 51.14021
[1] 31.36599
[1] 51.14021
[1] 31.53646
[1] 51.14021
[1] 31.70693
[1] 51.14021
[1] 31.8774
[1] 51.14021
[1] 32.04786
[1] 51.14021
[1] 32.21833
[1] 51.14021
[1] 32.3888
[1] 51.14021
[1] 32.55926
[1] 51.14021
[1] 32.72973
[1] 51.14021
[1] 32.9002
[1] 51.14021
[1] 33.07067
[1] 51.14021
[1] 33.24113
[1] 51.14021
[1] 33.4116
[1] 51.14021
[1] 33.58207
[1] 51.14021
[1] 33.75254
[1] 51.14021
[1] 33.923
[1] 51.14021
[1] 34.09347
[1] 51.14021
[1] 34.26394
[1] 51.14021
[1] 34.43441
[1] 51.14021
[1] 34.60487
[1] 51.14021
[1] 34.77534
[1] 51.14021
[1] 34.94581
[1] 51.14021
[1] 35.11628
[1] 51.14021
[1] 35.28674
[1] 51.14021
[1] 35.45721
[1] 51.14021
[1] 35.62768
[1] 51.14021
[1] 35.79814
[1] 51.14021
[1] 35.96861
[1] 51.14021
[1] 36.13908
[1] 51.14021
[1] 36.30955
[1] 51.14021
[1] 36.48001
[1] 51.14021
[1] 36.65048
[1] 51.14021
[1] 36.82095
[1] 51.14021
[1] 36.99142
[1] 51.14021
[1] 37.16188
[1] 51.14021
[1] 37.33235
[1] 51.14021
[1] 37.50282
[1] 51.14021
[1] 37.67329
[1] 51.14021
[1] 37.84375
[1] 51.14021
[1] 38.01422
[1] 51.14021
[1] 38.18469
[1] 51.14021
[1] 38.35516
[1] 51.14021
[1] 38.52562
[1] 51.14021
[1] 38.69609
[1] 51.14021
[1] 38.86656
[1] 51.14021
[1] 39.03702
[1] 51.14021
[1] 39.20749
[1] 51.14021
[1] 39.37796
[1] 51.14021
[1] 39.54843
[1] 51.14021
[1] 39.71889
[1] 51.14021
[1] 39.88936
[1] 51.14021
[1] 40.05983
[1] 51.14021
[1] 40.2303
[1] 51.14021
[1] 40.40076
[1] 51.14021
[1] 40.57123
[1] 51.14021
[1] 40.7417
[1] 51.14021
[1] 40.91217
[1] 51.14021
[1] 41.08263
[1] 51.14021
[1] 41.2531
[1] 51.14021
[1] 41.42357
[1] 51.14021
[1] 41.59403
[1] 51.14021
[1] 41.7645
[1] 51.14021
[1] 41.93497
[1] 51.14021
[1] 42.10544
[1] 51.14021
[1] 42.2759
[1] 51.14021
[1] 42.44637
[1] 51.14021
[1] 42.61684
[1] 51.14021
[1] 42.78731
[1] 51.14021
[1] 42.95777
[1] 51.14021
[1] 43.12824
[1] 51.14021
[1] 43.29871
[1] 51.14021
[1] 43.46918
[1] 51.14021
[1] 43.63964
[1] 51.14021
[1] 43.81011
[1] 51.14021
[1] 43.98058
[1] 51.14021
[1] 44.15105
[1] 51.14021
[1] 44.32151
[1] 51.14021
[1] 44.49198
[1] 51.14021
[1] 44.66245
[1] 51.14021
[1] 44.83291
[1] 51.14021
[1] 45.00338
[1] 51.14021
[1] 45.17385
[1] 51.14021
[1] 45.34432
[1] 51.14021
[1] 45.51478
[1] 51.14021
[1] 45.68525
[1] 51.14021
[1] 45.85572
[1] 51.14021
[1] 46.02619
[1] 51.14021
[1] 46.19665
[1] 51.14021
[1] 46.36712
[1] 51.14021
[1] 46.53759
[1] 51.14021
[1] 46.70806
[1] 51.14021
[1] 46.87852
[1] 51.14021
[1] 47.04899
[1] 51.14021
[1] 47.21946
[1] 51.14021
[1] 47.38992
[1] 51.14021
[1] 47.56039
[1] 51.14021
[1] 47.73086
[1] 51.14021
[1] 47.90133
[1] 51.14021
[1] 48.07179
[1] 51.14021
[1] 48.24226
[1] 51.14021
[1] 48.41273
[1] 51.14021
[1] 48.5832
[1] 51.14021
[1] 48.75366
[1] 51.14021
[1] 48.92413
[1] 51.14021
[1] 49.0946
[1] 51.14021
[1] 49.26507
[1] 51.14021
[1] 49.43553
[1] 51.14021
[1] 49.606
[1] 51.14021
[1] 49.77647
[1] 51.14021
[1] 49.94694
[1] 51.14021
[1] 50.1174
[1] 51.14021
[1] 50.28787
[1] 51.14021
[1] 50.45834
[1] 51.14021
[1] 50.6288
[1] 51.14021
[1] 50.79927
[1] 51.14021
[1] 50.96974
[1] 51.14021
[1] 51.14021
[1] 51.14021
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 87 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  9.412   0.945  48.961 
