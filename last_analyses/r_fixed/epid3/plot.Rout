
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=467, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=613, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=600, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2617398
[1] 78.52194
[1] 0.5234796
[1] 78.52194
[1] 0.7852194
[1] 78.52194
[1] 1.046959
[1] 78.52194
[1] 1.308699
[1] 78.52194
[1] 1.570439
[1] 78.52194
[1] 1.832178
[1] 78.52194
[1] 2.093918
[1] 78.52194
[1] 2.355658
[1] 78.52194
[1] 2.617398
[1] 78.52194
[1] 2.879138
[1] 78.52194
[1] 3.140877
[1] 78.52194
[1] 3.402617
[1] 78.52194
[1] 3.664357
[1] 78.52194
[1] 3.926097
[1] 78.52194
[1] 4.187837
[1] 78.52194
[1] 4.449576
[1] 78.52194
[1] 4.711316
[1] 78.52194
[1] 4.973056
[1] 78.52194
[1] 5.234796
[1] 78.52194
[1] 5.496535
[1] 78.52194
[1] 5.758275
[1] 78.52194
[1] 6.020015
[1] 78.52194
[1] 6.281755
[1] 78.52194
[1] 6.543495
[1] 78.52194
[1] 6.805234
[1] 78.52194
[1] 7.066974
[1] 78.52194
[1] 7.328714
[1] 78.52194
[1] 7.590454
[1] 78.52194
[1] 7.852194
[1] 78.52194
[1] 8.113933
[1] 78.52194
[1] 8.375673
[1] 78.52194
[1] 8.637413
[1] 78.52194
[1] 8.899153
[1] 78.52194
[1] 9.160892
[1] 78.52194
[1] 9.422632
[1] 78.52194
[1] 9.684372
[1] 78.52194
[1] 9.946112
[1] 78.52194
[1] 10.20785
[1] 78.52194
[1] 10.46959
[1] 78.52194
[1] 10.73133
[1] 78.52194
[1] 10.99307
[1] 78.52194
[1] 11.25481
[1] 78.52194
[1] 11.51655
[1] 78.52194
[1] 11.77829
[1] 78.52194
[1] 12.04003
[1] 78.52194
[1] 12.30177
[1] 78.52194
[1] 12.56351
[1] 78.52194
[1] 12.82525
[1] 78.52194
[1] 13.08699
[1] 78.52194
[1] 13.34873
[1] 78.52194
[1] 13.61047
[1] 78.52194
[1] 13.87221
[1] 78.52194
[1] 14.13395
[1] 78.52194
[1] 14.39569
[1] 78.52194
[1] 14.65743
[1] 78.52194
[1] 14.91917
[1] 78.52194
[1] 15.18091
[1] 78.52194
[1] 15.44265
[1] 78.52194
[1] 15.70439
[1] 78.52194
[1] 15.96613
[1] 78.52194
[1] 16.22787
[1] 78.52194
[1] 16.48961
[1] 78.52194
[1] 16.75135
[1] 78.52194
[1] 17.01309
[1] 78.52194
[1] 17.27483
[1] 78.52194
[1] 17.53657
[1] 78.52194
[1] 17.79831
[1] 78.52194
[1] 18.06005
[1] 78.52194
[1] 18.32178
[1] 78.52194
[1] 18.58352
[1] 78.52194
[1] 18.84526
[1] 78.52194
[1] 19.107
[1] 78.52194
[1] 19.36874
[1] 78.52194
[1] 19.63048
[1] 78.52194
[1] 19.89222
[1] 78.52194
[1] 20.15396
[1] 78.52194
[1] 20.4157
[1] 78.52194
[1] 20.67744
[1] 78.52194
[1] 20.93918
[1] 78.52194
[1] 21.20092
[1] 78.52194
[1] 21.46266
[1] 78.52194
[1] 21.7244
[1] 78.52194
[1] 21.98614
[1] 78.52194
[1] 22.24788
[1] 78.52194
[1] 22.50962
[1] 78.52194
[1] 22.77136
[1] 78.52194
[1] 23.0331
[1] 78.52194
[1] 23.29484
[1] 78.52194
[1] 23.55658
[1] 78.52194
[1] 23.81832
[1] 78.52194
[1] 24.08006
[1] 78.52194
[1] 24.3418
[1] 78.52194
[1] 24.60354
[1] 78.52194
[1] 24.86528
[1] 78.52194
[1] 25.12702
[1] 78.52194
[1] 25.38876
[1] 78.52194
[1] 25.6505
[1] 78.52194
[1] 25.91224
[1] 78.52194
[1] 26.17398
[1] 78.52194
[1] 26.43572
[1] 78.52194
[1] 26.69746
[1] 78.52194
[1] 26.9592
[1] 78.52194
[1] 27.22094
[1] 78.52194
[1] 27.48268
[1] 78.52194
[1] 27.74442
[1] 78.52194
[1] 28.00616
[1] 78.52194
[1] 28.2679
[1] 78.52194
[1] 28.52964
[1] 78.52194
[1] 28.79138
[1] 78.52194
[1] 29.05312
[1] 78.52194
[1] 29.31486
[1] 78.52194
[1] 29.5766
[1] 78.52194
[1] 29.83834
[1] 78.52194
[1] 30.10008
[1] 78.52194
[1] 30.36182
[1] 78.52194
[1] 30.62355
[1] 78.52194
[1] 30.88529
[1] 78.52194
[1] 31.14703
[1] 78.52194
[1] 31.40877
[1] 78.52194
[1] 31.67051
[1] 78.52194
[1] 31.93225
[1] 78.52194
[1] 32.19399
[1] 78.52194
[1] 32.45573
[1] 78.52194
[1] 32.71747
[1] 78.52194
[1] 32.97921
[1] 78.52194
[1] 33.24095
[1] 78.52194
[1] 33.50269
[1] 78.52194
[1] 33.76443
[1] 78.52194
[1] 34.02617
[1] 78.52194
[1] 34.28791
[1] 78.52194
[1] 34.54965
[1] 78.52194
[1] 34.81139
[1] 78.52194
[1] 35.07313
[1] 78.52194
[1] 35.33487
[1] 78.52194
[1] 35.59661
[1] 78.52194
[1] 35.85835
[1] 78.52194
[1] 36.12009
[1] 78.52194
[1] 36.38183
[1] 78.52194
[1] 36.64357
[1] 78.52194
[1] 36.90531
[1] 78.52194
[1] 37.16705
[1] 78.52194
[1] 37.42879
[1] 78.52194
[1] 37.69053
[1] 78.52194
[1] 37.95227
[1] 78.52194
[1] 38.21401
[1] 78.52194
[1] 38.47575
[1] 78.52194
[1] 38.73749
[1] 78.52194
[1] 38.99923
[1] 78.52194
[1] 39.26097
[1] 78.52194
[1] 39.52271
[1] 78.52194
[1] 39.78445
[1] 78.52194
[1] 40.04619
[1] 78.52194
[1] 40.30793
[1] 78.52194
[1] 40.56967
[1] 78.52194
[1] 40.83141
[1] 78.52194
[1] 41.09315
[1] 78.52194
[1] 41.35489
[1] 78.52194
[1] 41.61663
[1] 78.52194
[1] 41.87837
[1] 78.52194
[1] 42.14011
[1] 78.52194
[1] 42.40185
[1] 78.52194
[1] 42.66358
[1] 78.52194
[1] 42.92532
[1] 78.52194
[1] 43.18706
[1] 78.52194
[1] 43.4488
[1] 78.52194
[1] 43.71054
[1] 78.52194
[1] 43.97228
[1] 78.52194
[1] 44.23402
[1] 78.52194
[1] 44.49576
[1] 78.52194
[1] 44.7575
[1] 78.52194
[1] 45.01924
[1] 78.52194
[1] 45.28098
[1] 78.52194
[1] 45.54272
[1] 78.52194
[1] 45.80446
[1] 78.52194
[1] 46.0662
[1] 78.52194
[1] 46.32794
[1] 78.52194
[1] 46.58968
[1] 78.52194
[1] 46.85142
[1] 78.52194
[1] 47.11316
[1] 78.52194
[1] 47.3749
[1] 78.52194
[1] 47.63664
[1] 78.52194
[1] 47.89838
[1] 78.52194
[1] 48.16012
[1] 78.52194
[1] 48.42186
[1] 78.52194
[1] 48.6836
[1] 78.52194
[1] 48.94534
[1] 78.52194
[1] 49.20708
[1] 78.52194
[1] 49.46882
[1] 78.52194
[1] 49.73056
[1] 78.52194
[1] 49.9923
[1] 78.52194
[1] 50.25404
[1] 78.52194
[1] 50.51578
[1] 78.52194
[1] 50.77752
[1] 78.52194
[1] 51.03926
[1] 78.52194
[1] 51.301
[1] 78.52194
[1] 51.56274
[1] 78.52194
[1] 51.82448
[1] 78.52194
[1] 52.08622
[1] 78.52194
[1] 52.34796
[1] 78.52194
[1] 52.6097
[1] 78.52194
[1] 52.87144
[1] 78.52194
[1] 53.13318
[1] 78.52194
[1] 53.39492
[1] 78.52194
[1] 53.65666
[1] 78.52194
[1] 53.9184
[1] 78.52194
[1] 54.18014
[1] 78.52194
[1] 54.44188
[1] 78.52194
[1] 54.70362
[1] 78.52194
[1] 54.96535
[1] 78.52194
[1] 55.22709
[1] 78.52194
[1] 55.48883
[1] 78.52194
[1] 55.75057
[1] 78.52194
[1] 56.01231
[1] 78.52194
[1] 56.27405
[1] 78.52194
[1] 56.53579
[1] 78.52194
[1] 56.79753
[1] 78.52194
[1] 57.05927
[1] 78.52194
[1] 57.32101
[1] 78.52194
[1] 57.58275
[1] 78.52194
[1] 57.84449
[1] 78.52194
[1] 58.10623
[1] 78.52194
[1] 58.36797
[1] 78.52194
[1] 58.62971
[1] 78.52194
[1] 58.89145
[1] 78.52194
[1] 59.15319
[1] 78.52194
[1] 59.41493
[1] 78.52194
[1] 59.67667
[1] 78.52194
[1] 59.93841
[1] 78.52194
[1] 60.20015
[1] 78.52194
[1] 60.46189
[1] 78.52194
[1] 60.72363
[1] 78.52194
[1] 60.98537
[1] 78.52194
[1] 61.24711
[1] 78.52194
[1] 61.50885
[1] 78.52194
[1] 61.77059
[1] 78.52194
[1] 62.03233
[1] 78.52194
[1] 62.29407
[1] 78.52194
[1] 62.55581
[1] 78.52194
[1] 62.81755
[1] 78.52194
[1] 63.07929
[1] 78.52194
[1] 63.34103
[1] 78.52194
[1] 63.60277
[1] 78.52194
[1] 63.86451
[1] 78.52194
[1] 64.12625
[1] 78.52194
[1] 64.38799
[1] 78.52194
[1] 64.64973
[1] 78.52194
[1] 64.91147
[1] 78.52194
[1] 65.17321
[1] 78.52194
[1] 65.43495
[1] 78.52194
[1] 65.69669
[1] 78.52194
[1] 65.95843
[1] 78.52194
[1] 66.22017
[1] 78.52194
[1] 66.48191
[1] 78.52194
[1] 66.74365
[1] 78.52194
[1] 67.00539
[1] 78.52194
[1] 67.26712
[1] 78.52194
[1] 67.52886
[1] 78.52194
[1] 67.7906
[1] 78.52194
[1] 68.05234
[1] 78.52194
[1] 68.31408
[1] 78.52194
[1] 68.57582
[1] 78.52194
[1] 68.83756
[1] 78.52194
[1] 69.0993
[1] 78.52194
[1] 69.36104
[1] 78.52194
[1] 69.62278
[1] 78.52194
[1] 69.88452
[1] 78.52194
[1] 70.14626
[1] 78.52194
[1] 70.408
[1] 78.52194
[1] 70.66974
[1] 78.52194
[1] 70.93148
[1] 78.52194
[1] 71.19322
[1] 78.52194
[1] 71.45496
[1] 78.52194
[1] 71.7167
[1] 78.52194
[1] 71.97844
[1] 78.52194
[1] 72.24018
[1] 78.52194
[1] 72.50192
[1] 78.52194
[1] 72.76366
[1] 78.52194
[1] 73.0254
[1] 78.52194
[1] 73.28714
[1] 78.52194
[1] 73.54888
[1] 78.52194
[1] 73.81062
[1] 78.52194
[1] 74.07236
[1] 78.52194
[1] 74.3341
[1] 78.52194
[1] 74.59584
[1] 78.52194
[1] 74.85758
[1] 78.52194
[1] 75.11932
[1] 78.52194
[1] 75.38106
[1] 78.52194
[1] 75.6428
[1] 78.52194
[1] 75.90454
[1] 78.52194
[1] 76.16628
[1] 78.52194
[1] 76.42802
[1] 78.52194
[1] 76.68976
[1] 78.52194
[1] 76.9515
[1] 78.52194
[1] 77.21324
[1] 78.52194
[1] 77.47498
[1] 78.52194
[1] 77.73672
[1] 78.52194
[1] 77.99846
[1] 78.52194
[1] 78.2602
[1] 78.52194
[1] 78.52194
[1] 78.52194
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  8.388   0.460  15.568 
