
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=467, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=613, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=600, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2611734
[1] 78.35201
[1] 0.5223467
[1] 78.35201
[1] 0.7835201
[1] 78.35201
[1] 1.044693
[1] 78.35201
[1] 1.305867
[1] 78.35201
[1] 1.56704
[1] 78.35201
[1] 1.828213
[1] 78.35201
[1] 2.089387
[1] 78.35201
[1] 2.35056
[1] 78.35201
[1] 2.611734
[1] 78.35201
[1] 2.872907
[1] 78.35201
[1] 3.13408
[1] 78.35201
[1] 3.395254
[1] 78.35201
[1] 3.656427
[1] 78.35201
[1] 3.9176
[1] 78.35201
[1] 4.178774
[1] 78.35201
[1] 4.439947
[1] 78.35201
[1] 4.70112
[1] 78.35201
[1] 4.962294
[1] 78.35201
[1] 5.223467
[1] 78.35201
[1] 5.48464
[1] 78.35201
[1] 5.745814
[1] 78.35201
[1] 6.006987
[1] 78.35201
[1] 6.268161
[1] 78.35201
[1] 6.529334
[1] 78.35201
[1] 6.790507
[1] 78.35201
[1] 7.051681
[1] 78.35201
[1] 7.312854
[1] 78.35201
[1] 7.574027
[1] 78.35201
[1] 7.835201
[1] 78.35201
[1] 8.096374
[1] 78.35201
[1] 8.357547
[1] 78.35201
[1] 8.618721
[1] 78.35201
[1] 8.879894
[1] 78.35201
[1] 9.141067
[1] 78.35201
[1] 9.402241
[1] 78.35201
[1] 9.663414
[1] 78.35201
[1] 9.924588
[1] 78.35201
[1] 10.18576
[1] 78.35201
[1] 10.44693
[1] 78.35201
[1] 10.70811
[1] 78.35201
[1] 10.96928
[1] 78.35201
[1] 11.23045
[1] 78.35201
[1] 11.49163
[1] 78.35201
[1] 11.7528
[1] 78.35201
[1] 12.01397
[1] 78.35201
[1] 12.27515
[1] 78.35201
[1] 12.53632
[1] 78.35201
[1] 12.79749
[1] 78.35201
[1] 13.05867
[1] 78.35201
[1] 13.31984
[1] 78.35201
[1] 13.58101
[1] 78.35201
[1] 13.84219
[1] 78.35201
[1] 14.10336
[1] 78.35201
[1] 14.36453
[1] 78.35201
[1] 14.62571
[1] 78.35201
[1] 14.88688
[1] 78.35201
[1] 15.14805
[1] 78.35201
[1] 15.40923
[1] 78.35201
[1] 15.6704
[1] 78.35201
[1] 15.93157
[1] 78.35201
[1] 16.19275
[1] 78.35201
[1] 16.45392
[1] 78.35201
[1] 16.71509
[1] 78.35201
[1] 16.97627
[1] 78.35201
[1] 17.23744
[1] 78.35201
[1] 17.49861
[1] 78.35201
[1] 17.75979
[1] 78.35201
[1] 18.02096
[1] 78.35201
[1] 18.28213
[1] 78.35201
[1] 18.54331
[1] 78.35201
[1] 18.80448
[1] 78.35201
[1] 19.06566
[1] 78.35201
[1] 19.32683
[1] 78.35201
[1] 19.588
[1] 78.35201
[1] 19.84918
[1] 78.35201
[1] 20.11035
[1] 78.35201
[1] 20.37152
[1] 78.35201
[1] 20.6327
[1] 78.35201
[1] 20.89387
[1] 78.35201
[1] 21.15504
[1] 78.35201
[1] 21.41622
[1] 78.35201
[1] 21.67739
[1] 78.35201
[1] 21.93856
[1] 78.35201
[1] 22.19974
[1] 78.35201
[1] 22.46091
[1] 78.35201
[1] 22.72208
[1] 78.35201
[1] 22.98326
[1] 78.35201
[1] 23.24443
[1] 78.35201
[1] 23.5056
[1] 78.35201
[1] 23.76678
[1] 78.35201
[1] 24.02795
[1] 78.35201
[1] 24.28912
[1] 78.35201
[1] 24.5503
[1] 78.35201
[1] 24.81147
[1] 78.35201
[1] 25.07264
[1] 78.35201
[1] 25.33382
[1] 78.35201
[1] 25.59499
[1] 78.35201
[1] 25.85616
[1] 78.35201
[1] 26.11734
[1] 78.35201
[1] 26.37851
[1] 78.35201
[1] 26.63968
[1] 78.35201
[1] 26.90086
[1] 78.35201
[1] 27.16203
[1] 78.35201
[1] 27.4232
[1] 78.35201
[1] 27.68438
[1] 78.35201
[1] 27.94555
[1] 78.35201
[1] 28.20672
[1] 78.35201
[1] 28.4679
[1] 78.35201
[1] 28.72907
[1] 78.35201
[1] 28.99024
[1] 78.35201
[1] 29.25142
[1] 78.35201
[1] 29.51259
[1] 78.35201
[1] 29.77376
[1] 78.35201
[1] 30.03494
[1] 78.35201
[1] 30.29611
[1] 78.35201
[1] 30.55728
[1] 78.35201
[1] 30.81846
[1] 78.35201
[1] 31.07963
[1] 78.35201
[1] 31.3408
[1] 78.35201
[1] 31.60198
[1] 78.35201
[1] 31.86315
[1] 78.35201
[1] 32.12432
[1] 78.35201
[1] 32.3855
[1] 78.35201
[1] 32.64667
[1] 78.35201
[1] 32.90784
[1] 78.35201
[1] 33.16902
[1] 78.35201
[1] 33.43019
[1] 78.35201
[1] 33.69136
[1] 78.35201
[1] 33.95254
[1] 78.35201
[1] 34.21371
[1] 78.35201
[1] 34.47488
[1] 78.35201
[1] 34.73606
[1] 78.35201
[1] 34.99723
[1] 78.35201
[1] 35.2584
[1] 78.35201
[1] 35.51958
[1] 78.35201
[1] 35.78075
[1] 78.35201
[1] 36.04192
[1] 78.35201
[1] 36.3031
[1] 78.35201
[1] 36.56427
[1] 78.35201
[1] 36.82544
[1] 78.35201
[1] 37.08662
[1] 78.35201
[1] 37.34779
[1] 78.35201
[1] 37.60896
[1] 78.35201
[1] 37.87014
[1] 78.35201
[1] 38.13131
[1] 78.35201
[1] 38.39248
[1] 78.35201
[1] 38.65366
[1] 78.35201
[1] 38.91483
[1] 78.35201
[1] 39.176
[1] 78.35201
[1] 39.43718
[1] 78.35201
[1] 39.69835
[1] 78.35201
[1] 39.95952
[1] 78.35201
[1] 40.2207
[1] 78.35201
[1] 40.48187
[1] 78.35201
[1] 40.74304
[1] 78.35201
[1] 41.00422
[1] 78.35201
[1] 41.26539
[1] 78.35201
[1] 41.52656
[1] 78.35201
[1] 41.78774
[1] 78.35201
[1] 42.04891
[1] 78.35201
[1] 42.31008
[1] 78.35201
[1] 42.57126
[1] 78.35201
[1] 42.83243
[1] 78.35201
[1] 43.0936
[1] 78.35201
[1] 43.35478
[1] 78.35201
[1] 43.61595
[1] 78.35201
[1] 43.87712
[1] 78.35201
[1] 44.1383
[1] 78.35201
[1] 44.39947
[1] 78.35201
[1] 44.66064
[1] 78.35201
[1] 44.92182
[1] 78.35201
[1] 45.18299
[1] 78.35201
[1] 45.44416
[1] 78.35201
[1] 45.70534
[1] 78.35201
[1] 45.96651
[1] 78.35201
[1] 46.22768
[1] 78.35201
[1] 46.48886
[1] 78.35201
[1] 46.75003
[1] 78.35201
[1] 47.0112
[1] 78.35201
[1] 47.27238
[1] 78.35201
[1] 47.53355
[1] 78.35201
[1] 47.79472
[1] 78.35201
[1] 48.0559
[1] 78.35201
[1] 48.31707
[1] 78.35201
[1] 48.57824
[1] 78.35201
[1] 48.83942
[1] 78.35201
[1] 49.10059
[1] 78.35201
[1] 49.36176
[1] 78.35201
[1] 49.62294
[1] 78.35201
[1] 49.88411
[1] 78.35201
[1] 50.14528
[1] 78.35201
[1] 50.40646
[1] 78.35201
[1] 50.66763
[1] 78.35201
[1] 50.9288
[1] 78.35201
[1] 51.18998
[1] 78.35201
[1] 51.45115
[1] 78.35201
[1] 51.71232
[1] 78.35201
[1] 51.9735
[1] 78.35201
[1] 52.23467
[1] 78.35201
[1] 52.49584
[1] 78.35201
[1] 52.75702
[1] 78.35201
[1] 53.01819
[1] 78.35201
[1] 53.27936
[1] 78.35201
[1] 53.54054
[1] 78.35201
[1] 53.80171
[1] 78.35201
[1] 54.06288
[1] 78.35201
[1] 54.32406
[1] 78.35201
[1] 54.58523
[1] 78.35201
[1] 54.8464
[1] 78.35201
[1] 55.10758
[1] 78.35201
[1] 55.36875
[1] 78.35201
[1] 55.62992
[1] 78.35201
[1] 55.8911
[1] 78.35201
[1] 56.15227
[1] 78.35201
[1] 56.41344
[1] 78.35201
[1] 56.67462
[1] 78.35201
[1] 56.93579
[1] 78.35201
[1] 57.19697
[1] 78.35201
[1] 57.45814
[1] 78.35201
[1] 57.71931
[1] 78.35201
[1] 57.98049
[1] 78.35201
[1] 58.24166
[1] 78.35201
[1] 58.50283
[1] 78.35201
[1] 58.76401
[1] 78.35201
[1] 59.02518
[1] 78.35201
[1] 59.28635
[1] 78.35201
[1] 59.54753
[1] 78.35201
[1] 59.8087
[1] 78.35201
[1] 60.06987
[1] 78.35201
[1] 60.33105
[1] 78.35201
[1] 60.59222
[1] 78.35201
[1] 60.85339
[1] 78.35201
[1] 61.11457
[1] 78.35201
[1] 61.37574
[1] 78.35201
[1] 61.63691
[1] 78.35201
[1] 61.89809
[1] 78.35201
[1] 62.15926
[1] 78.35201
[1] 62.42043
[1] 78.35201
[1] 62.68161
[1] 78.35201
[1] 62.94278
[1] 78.35201
[1] 63.20395
[1] 78.35201
[1] 63.46513
[1] 78.35201
[1] 63.7263
[1] 78.35201
[1] 63.98747
[1] 78.35201
[1] 64.24865
[1] 78.35201
[1] 64.50982
[1] 78.35201
[1] 64.77099
[1] 78.35201
[1] 65.03217
[1] 78.35201
[1] 65.29334
[1] 78.35201
[1] 65.55451
[1] 78.35201
[1] 65.81569
[1] 78.35201
[1] 66.07686
[1] 78.35201
[1] 66.33803
[1] 78.35201
[1] 66.59921
[1] 78.35201
[1] 66.86038
[1] 78.35201
[1] 67.12155
[1] 78.35201
[1] 67.38273
[1] 78.35201
[1] 67.6439
[1] 78.35201
[1] 67.90507
[1] 78.35201
[1] 68.16625
[1] 78.35201
[1] 68.42742
[1] 78.35201
[1] 68.68859
[1] 78.35201
[1] 68.94977
[1] 78.35201
[1] 69.21094
[1] 78.35201
[1] 69.47211
[1] 78.35201
[1] 69.73329
[1] 78.35201
[1] 69.99446
[1] 78.35201
[1] 70.25563
[1] 78.35201
[1] 70.51681
[1] 78.35201
[1] 70.77798
[1] 78.35201
[1] 71.03915
[1] 78.35201
[1] 71.30033
[1] 78.35201
[1] 71.5615
[1] 78.35201
[1] 71.82267
[1] 78.35201
[1] 72.08385
[1] 78.35201
[1] 72.34502
[1] 78.35201
[1] 72.60619
[1] 78.35201
[1] 72.86737
[1] 78.35201
[1] 73.12854
[1] 78.35201
[1] 73.38971
[1] 78.35201
[1] 73.65089
[1] 78.35201
[1] 73.91206
[1] 78.35201
[1] 74.17323
[1] 78.35201
[1] 74.43441
[1] 78.35201
[1] 74.69558
[1] 78.35201
[1] 74.95675
[1] 78.35201
[1] 75.21793
[1] 78.35201
[1] 75.4791
[1] 78.35201
[1] 75.74027
[1] 78.35201
[1] 76.00145
[1] 78.35201
[1] 76.26262
[1] 78.35201
[1] 76.52379
[1] 78.35201
[1] 76.78497
[1] 78.35201
[1] 77.04614
[1] 78.35201
[1] 77.30731
[1] 78.35201
[1] 77.56849
[1] 78.35201
[1] 77.82966
[1] 78.35201
[1] 78.09083
[1] 78.35201
[1] 78.35201
[1] 78.35201
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  1.597   0.050   1.684 
