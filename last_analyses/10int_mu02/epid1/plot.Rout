
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=641, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=562, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=601, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1546647
[1] 46.3994
[1] 0.3093294
[1] 46.3994
[1] 0.463994
[1] 46.3994
[1] 0.6186587
[1] 46.3994
[1] 0.7733234
[1] 46.3994
[1] 0.9279881
[1] 46.3994
[1] 1.082653
[1] 46.3994
[1] 1.237317
[1] 46.3994
[1] 1.391982
[1] 46.3994
[1] 1.546647
[1] 46.3994
[1] 1.701312
[1] 46.3994
[1] 1.855976
[1] 46.3994
[1] 2.010641
[1] 46.3994
[1] 2.165306
[1] 46.3994
[1] 2.31997
[1] 46.3994
[1] 2.474635
[1] 46.3994
[1] 2.6293
[1] 46.3994
[1] 2.783964
[1] 46.3994
[1] 2.938629
[1] 46.3994
[1] 3.093294
[1] 46.3994
[1] 3.247958
[1] 46.3994
[1] 3.402623
[1] 46.3994
[1] 3.557288
[1] 46.3994
[1] 3.711952
[1] 46.3994
[1] 3.866617
[1] 46.3994
[1] 4.021282
[1] 46.3994
[1] 4.175946
[1] 46.3994
[1] 4.330611
[1] 46.3994
[1] 4.485276
[1] 46.3994
[1] 4.63994
[1] 46.3994
[1] 4.794605
[1] 46.3994
[1] 4.94927
[1] 46.3994
[1] 5.103935
[1] 46.3994
[1] 5.258599
[1] 46.3994
[1] 5.413264
[1] 46.3994
[1] 5.567929
[1] 46.3994
[1] 5.722593
[1] 46.3994
[1] 5.877258
[1] 46.3994
[1] 6.031923
[1] 46.3994
[1] 6.186587
[1] 46.3994
[1] 6.341252
[1] 46.3994
[1] 6.495917
[1] 46.3994
[1] 6.650581
[1] 46.3994
[1] 6.805246
[1] 46.3994
[1] 6.959911
[1] 46.3994
[1] 7.114575
[1] 46.3994
[1] 7.26924
[1] 46.3994
[1] 7.423905
[1] 46.3994
[1] 7.578569
[1] 46.3994
[1] 7.733234
[1] 46.3994
[1] 7.887899
[1] 46.3994
[1] 8.042563
[1] 46.3994
[1] 8.197228
[1] 46.3994
[1] 8.351893
[1] 46.3994
[1] 8.506558
[1] 46.3994
[1] 8.661222
[1] 46.3994
[1] 8.815887
[1] 46.3994
[1] 8.970552
[1] 46.3994
[1] 9.125216
[1] 46.3994
[1] 9.279881
[1] 46.3994
[1] 9.434546
[1] 46.3994
[1] 9.58921
[1] 46.3994
[1] 9.743875
[1] 46.3994
[1] 9.89854
[1] 46.3994
[1] 10.0532
[1] 46.3994
[1] 10.20787
[1] 46.3994
[1] 10.36253
[1] 46.3994
[1] 10.5172
[1] 46.3994
[1] 10.67186
[1] 46.3994
[1] 10.82653
[1] 46.3994
[1] 10.98119
[1] 46.3994
[1] 11.13586
[1] 46.3994
[1] 11.29052
[1] 46.3994
[1] 11.44519
[1] 46.3994
[1] 11.59985
[1] 46.3994
[1] 11.75452
[1] 46.3994
[1] 11.90918
[1] 46.3994
[1] 12.06385
[1] 46.3994
[1] 12.21851
[1] 46.3994
[1] 12.37317
[1] 46.3994
[1] 12.52784
[1] 46.3994
[1] 12.6825
[1] 46.3994
[1] 12.83717
[1] 46.3994
[1] 12.99183
[1] 46.3994
[1] 13.1465
[1] 46.3994
[1] 13.30116
[1] 46.3994
[1] 13.45583
[1] 46.3994
[1] 13.61049
[1] 46.3994
[1] 13.76516
[1] 46.3994
[1] 13.91982
[1] 46.3994
[1] 14.07449
[1] 46.3994
[1] 14.22915
[1] 46.3994
[1] 14.38382
[1] 46.3994
[1] 14.53848
[1] 46.3994
[1] 14.69314
[1] 46.3994
[1] 14.84781
[1] 46.3994
[1] 15.00247
[1] 46.3994
[1] 15.15714
[1] 46.3994
[1] 15.3118
[1] 46.3994
[1] 15.46647
[1] 46.3994
[1] 15.62113
[1] 46.3994
[1] 15.7758
[1] 46.3994
[1] 15.93046
[1] 46.3994
[1] 16.08513
[1] 46.3994
[1] 16.23979
[1] 46.3994
[1] 16.39446
[1] 46.3994
[1] 16.54912
[1] 46.3994
[1] 16.70379
[1] 46.3994
[1] 16.85845
[1] 46.3994
[1] 17.01312
[1] 46.3994
[1] 17.16778
[1] 46.3994
[1] 17.32244
[1] 46.3994
[1] 17.47711
[1] 46.3994
[1] 17.63177
[1] 46.3994
[1] 17.78644
[1] 46.3994
[1] 17.9411
[1] 46.3994
[1] 18.09577
[1] 46.3994
[1] 18.25043
[1] 46.3994
[1] 18.4051
[1] 46.3994
[1] 18.55976
[1] 46.3994
[1] 18.71443
[1] 46.3994
[1] 18.86909
[1] 46.3994
[1] 19.02376
[1] 46.3994
[1] 19.17842
[1] 46.3994
[1] 19.33309
[1] 46.3994
[1] 19.48775
[1] 46.3994
[1] 19.64241
[1] 46.3994
[1] 19.79708
[1] 46.3994
[1] 19.95174
[1] 46.3994
[1] 20.10641
[1] 46.3994
[1] 20.26107
[1] 46.3994
[1] 20.41574
[1] 46.3994
[1] 20.5704
[1] 46.3994
[1] 20.72507
[1] 46.3994
[1] 20.87973
[1] 46.3994
[1] 21.0344
[1] 46.3994
[1] 21.18906
[1] 46.3994
[1] 21.34373
[1] 46.3994
[1] 21.49839
[1] 46.3994
[1] 21.65306
[1] 46.3994
[1] 21.80772
[1] 46.3994
[1] 21.96238
[1] 46.3994
[1] 22.11705
[1] 46.3994
[1] 22.27171
[1] 46.3994
[1] 22.42638
[1] 46.3994
[1] 22.58104
[1] 46.3994
[1] 22.73571
[1] 46.3994
[1] 22.89037
[1] 46.3994
[1] 23.04504
[1] 46.3994
[1] 23.1997
[1] 46.3994
[1] 23.35437
[1] 46.3994
[1] 23.50903
[1] 46.3994
[1] 23.6637
[1] 46.3994
[1] 23.81836
[1] 46.3994
[1] 23.97303
[1] 46.3994
[1] 24.12769
[1] 46.3994
[1] 24.28236
[1] 46.3994
[1] 24.43702
[1] 46.3994
[1] 24.59168
[1] 46.3994
[1] 24.74635
[1] 46.3994
[1] 24.90101
[1] 46.3994
[1] 25.05568
[1] 46.3994
[1] 25.21034
[1] 46.3994
[1] 25.36501
[1] 46.3994
[1] 25.51967
[1] 46.3994
[1] 25.67434
[1] 46.3994
[1] 25.829
[1] 46.3994
[1] 25.98367
[1] 46.3994
[1] 26.13833
[1] 46.3994
[1] 26.293
[1] 46.3994
[1] 26.44766
[1] 46.3994
[1] 26.60233
[1] 46.3994
[1] 26.75699
[1] 46.3994
[1] 26.91165
[1] 46.3994
[1] 27.06632
[1] 46.3994
[1] 27.22098
[1] 46.3994
[1] 27.37565
[1] 46.3994
[1] 27.53031
[1] 46.3994
[1] 27.68498
[1] 46.3994
[1] 27.83964
[1] 46.3994
[1] 27.99431
[1] 46.3994
[1] 28.14897
[1] 46.3994
[1] 28.30364
[1] 46.3994
[1] 28.4583
[1] 46.3994
[1] 28.61297
[1] 46.3994
[1] 28.76763
[1] 46.3994
[1] 28.9223
[1] 46.3994
[1] 29.07696
[1] 46.3994
[1] 29.23162
[1] 46.3994
[1] 29.38629
[1] 46.3994
[1] 29.54095
[1] 46.3994
[1] 29.69562
[1] 46.3994
[1] 29.85028
[1] 46.3994
[1] 30.00495
[1] 46.3994
[1] 30.15961
[1] 46.3994
[1] 30.31428
[1] 46.3994
[1] 30.46894
[1] 46.3994
[1] 30.62361
[1] 46.3994
[1] 30.77827
[1] 46.3994
[1] 30.93294
[1] 46.3994
[1] 31.0876
[1] 46.3994
[1] 31.24227
[1] 46.3994
[1] 31.39693
[1] 46.3994
[1] 31.5516
[1] 46.3994
[1] 31.70626
[1] 46.3994
[1] 31.86092
[1] 46.3994
[1] 32.01559
[1] 46.3994
[1] 32.17025
[1] 46.3994
[1] 32.32492
[1] 46.3994
[1] 32.47958
[1] 46.3994
[1] 32.63425
[1] 46.3994
[1] 32.78891
[1] 46.3994
[1] 32.94358
[1] 46.3994
[1] 33.09824
[1] 46.3994
[1] 33.25291
[1] 46.3994
[1] 33.40757
[1] 46.3994
[1] 33.56224
[1] 46.3994
[1] 33.7169
[1] 46.3994
[1] 33.87157
[1] 46.3994
[1] 34.02623
[1] 46.3994
[1] 34.18089
[1] 46.3994
[1] 34.33556
[1] 46.3994
[1] 34.49022
[1] 46.3994
[1] 34.64489
[1] 46.3994
[1] 34.79955
[1] 46.3994
[1] 34.95422
[1] 46.3994
[1] 35.10888
[1] 46.3994
[1] 35.26355
[1] 46.3994
[1] 35.41821
[1] 46.3994
[1] 35.57288
[1] 46.3994
[1] 35.72754
[1] 46.3994
[1] 35.88221
[1] 46.3994
[1] 36.03687
[1] 46.3994
[1] 36.19154
[1] 46.3994
[1] 36.3462
[1] 46.3994
[1] 36.50086
[1] 46.3994
[1] 36.65553
[1] 46.3994
[1] 36.81019
[1] 46.3994
[1] 36.96486
[1] 46.3994
[1] 37.11952
[1] 46.3994
[1] 37.27419
[1] 46.3994
[1] 37.42885
[1] 46.3994
[1] 37.58352
[1] 46.3994
[1] 37.73818
[1] 46.3994
[1] 37.89285
[1] 46.3994
[1] 38.04751
[1] 46.3994
[1] 38.20218
[1] 46.3994
[1] 38.35684
[1] 46.3994
[1] 38.51151
[1] 46.3994
[1] 38.66617
[1] 46.3994
[1] 38.82084
[1] 46.3994
[1] 38.9755
[1] 46.3994
[1] 39.13016
[1] 46.3994
[1] 39.28483
[1] 46.3994
[1] 39.43949
[1] 46.3994
[1] 39.59416
[1] 46.3994
[1] 39.74882
[1] 46.3994
[1] 39.90349
[1] 46.3994
[1] 40.05815
[1] 46.3994
[1] 40.21282
[1] 46.3994
[1] 40.36748
[1] 46.3994
[1] 40.52215
[1] 46.3994
[1] 40.67681
[1] 46.3994
[1] 40.83148
[1] 46.3994
[1] 40.98614
[1] 46.3994
[1] 41.14081
[1] 46.3994
[1] 41.29547
[1] 46.3994
[1] 41.45013
[1] 46.3994
[1] 41.6048
[1] 46.3994
[1] 41.75946
[1] 46.3994
[1] 41.91413
[1] 46.3994
[1] 42.06879
[1] 46.3994
[1] 42.22346
[1] 46.3994
[1] 42.37812
[1] 46.3994
[1] 42.53279
[1] 46.3994
[1] 42.68745
[1] 46.3994
[1] 42.84212
[1] 46.3994
[1] 42.99678
[1] 46.3994
[1] 43.15145
[1] 46.3994
[1] 43.30611
[1] 46.3994
[1] 43.46078
[1] 46.3994
[1] 43.61544
[1] 46.3994
[1] 43.7701
[1] 46.3994
[1] 43.92477
[1] 46.3994
[1] 44.07943
[1] 46.3994
[1] 44.2341
[1] 46.3994
[1] 44.38876
[1] 46.3994
[1] 44.54343
[1] 46.3994
[1] 44.69809
[1] 46.3994
[1] 44.85276
[1] 46.3994
[1] 45.00742
[1] 46.3994
[1] 45.16209
[1] 46.3994
[1] 45.31675
[1] 46.3994
[1] 45.47142
[1] 46.3994
[1] 45.62608
[1] 46.3994
[1] 45.78075
[1] 46.3994
[1] 45.93541
[1] 46.3994
[1] 46.09008
[1] 46.3994
[1] 46.24474
[1] 46.3994
[1] 46.3994
[1] 46.3994
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 28.655   0.954  45.699 
