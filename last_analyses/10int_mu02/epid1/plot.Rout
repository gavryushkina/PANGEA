
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=641, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=562, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=601, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1563664
[1] 46.90993
[1] 0.3127329
[1] 46.90993
[1] 0.4690993
[1] 46.90993
[1] 0.6254658
[1] 46.90993
[1] 0.7818322
[1] 46.90993
[1] 0.9381986
[1] 46.90993
[1] 1.094565
[1] 46.90993
[1] 1.250932
[1] 46.90993
[1] 1.407298
[1] 46.90993
[1] 1.563664
[1] 46.90993
[1] 1.720031
[1] 46.90993
[1] 1.876397
[1] 46.90993
[1] 2.032764
[1] 46.90993
[1] 2.18913
[1] 46.90993
[1] 2.345497
[1] 46.90993
[1] 2.501863
[1] 46.90993
[1] 2.658229
[1] 46.90993
[1] 2.814596
[1] 46.90993
[1] 2.970962
[1] 46.90993
[1] 3.127329
[1] 46.90993
[1] 3.283695
[1] 46.90993
[1] 3.440062
[1] 46.90993
[1] 3.596428
[1] 46.90993
[1] 3.752795
[1] 46.90993
[1] 3.909161
[1] 46.90993
[1] 4.065527
[1] 46.90993
[1] 4.221894
[1] 46.90993
[1] 4.37826
[1] 46.90993
[1] 4.534627
[1] 46.90993
[1] 4.690993
[1] 46.90993
[1] 4.84736
[1] 46.90993
[1] 5.003726
[1] 46.90993
[1] 5.160092
[1] 46.90993
[1] 5.316459
[1] 46.90993
[1] 5.472825
[1] 46.90993
[1] 5.629192
[1] 46.90993
[1] 5.785558
[1] 46.90993
[1] 5.941925
[1] 46.90993
[1] 6.098291
[1] 46.90993
[1] 6.254658
[1] 46.90993
[1] 6.411024
[1] 46.90993
[1] 6.56739
[1] 46.90993
[1] 6.723757
[1] 46.90993
[1] 6.880123
[1] 46.90993
[1] 7.03649
[1] 46.90993
[1] 7.192856
[1] 46.90993
[1] 7.349223
[1] 46.90993
[1] 7.505589
[1] 46.90993
[1] 7.661955
[1] 46.90993
[1] 7.818322
[1] 46.90993
[1] 7.974688
[1] 46.90993
[1] 8.131055
[1] 46.90993
[1] 8.287421
[1] 46.90993
[1] 8.443788
[1] 46.90993
[1] 8.600154
[1] 46.90993
[1] 8.756521
[1] 46.90993
[1] 8.912887
[1] 46.90993
[1] 9.069253
[1] 46.90993
[1] 9.22562
[1] 46.90993
[1] 9.381986
[1] 46.90993
[1] 9.538353
[1] 46.90993
[1] 9.694719
[1] 46.90993
[1] 9.851086
[1] 46.90993
[1] 10.00745
[1] 46.90993
[1] 10.16382
[1] 46.90993
[1] 10.32018
[1] 46.90993
[1] 10.47655
[1] 46.90993
[1] 10.63292
[1] 46.90993
[1] 10.78928
[1] 46.90993
[1] 10.94565
[1] 46.90993
[1] 11.10202
[1] 46.90993
[1] 11.25838
[1] 46.90993
[1] 11.41475
[1] 46.90993
[1] 11.57112
[1] 46.90993
[1] 11.72748
[1] 46.90993
[1] 11.88385
[1] 46.90993
[1] 12.04022
[1] 46.90993
[1] 12.19658
[1] 46.90993
[1] 12.35295
[1] 46.90993
[1] 12.50932
[1] 46.90993
[1] 12.66568
[1] 46.90993
[1] 12.82205
[1] 46.90993
[1] 12.97841
[1] 46.90993
[1] 13.13478
[1] 46.90993
[1] 13.29115
[1] 46.90993
[1] 13.44751
[1] 46.90993
[1] 13.60388
[1] 46.90993
[1] 13.76025
[1] 46.90993
[1] 13.91661
[1] 46.90993
[1] 14.07298
[1] 46.90993
[1] 14.22935
[1] 46.90993
[1] 14.38571
[1] 46.90993
[1] 14.54208
[1] 46.90993
[1] 14.69845
[1] 46.90993
[1] 14.85481
[1] 46.90993
[1] 15.01118
[1] 46.90993
[1] 15.16754
[1] 46.90993
[1] 15.32391
[1] 46.90993
[1] 15.48028
[1] 46.90993
[1] 15.63664
[1] 46.90993
[1] 15.79301
[1] 46.90993
[1] 15.94938
[1] 46.90993
[1] 16.10574
[1] 46.90993
[1] 16.26211
[1] 46.90993
[1] 16.41848
[1] 46.90993
[1] 16.57484
[1] 46.90993
[1] 16.73121
[1] 46.90993
[1] 16.88758
[1] 46.90993
[1] 17.04394
[1] 46.90993
[1] 17.20031
[1] 46.90993
[1] 17.35667
[1] 46.90993
[1] 17.51304
[1] 46.90993
[1] 17.66941
[1] 46.90993
[1] 17.82577
[1] 46.90993
[1] 17.98214
[1] 46.90993
[1] 18.13851
[1] 46.90993
[1] 18.29487
[1] 46.90993
[1] 18.45124
[1] 46.90993
[1] 18.60761
[1] 46.90993
[1] 18.76397
[1] 46.90993
[1] 18.92034
[1] 46.90993
[1] 19.07671
[1] 46.90993
[1] 19.23307
[1] 46.90993
[1] 19.38944
[1] 46.90993
[1] 19.5458
[1] 46.90993
[1] 19.70217
[1] 46.90993
[1] 19.85854
[1] 46.90993
[1] 20.0149
[1] 46.90993
[1] 20.17127
[1] 46.90993
[1] 20.32764
[1] 46.90993
[1] 20.484
[1] 46.90993
[1] 20.64037
[1] 46.90993
[1] 20.79674
[1] 46.90993
[1] 20.9531
[1] 46.90993
[1] 21.10947
[1] 46.90993
[1] 21.26584
[1] 46.90993
[1] 21.4222
[1] 46.90993
[1] 21.57857
[1] 46.90993
[1] 21.73493
[1] 46.90993
[1] 21.8913
[1] 46.90993
[1] 22.04767
[1] 46.90993
[1] 22.20403
[1] 46.90993
[1] 22.3604
[1] 46.90993
[1] 22.51677
[1] 46.90993
[1] 22.67313
[1] 46.90993
[1] 22.8295
[1] 46.90993
[1] 22.98587
[1] 46.90993
[1] 23.14223
[1] 46.90993
[1] 23.2986
[1] 46.90993
[1] 23.45497
[1] 46.90993
[1] 23.61133
[1] 46.90993
[1] 23.7677
[1] 46.90993
[1] 23.92406
[1] 46.90993
[1] 24.08043
[1] 46.90993
[1] 24.2368
[1] 46.90993
[1] 24.39316
[1] 46.90993
[1] 24.54953
[1] 46.90993
[1] 24.7059
[1] 46.90993
[1] 24.86226
[1] 46.90993
[1] 25.01863
[1] 46.90993
[1] 25.175
[1] 46.90993
[1] 25.33136
[1] 46.90993
[1] 25.48773
[1] 46.90993
[1] 25.6441
[1] 46.90993
[1] 25.80046
[1] 46.90993
[1] 25.95683
[1] 46.90993
[1] 26.1132
[1] 46.90993
[1] 26.26956
[1] 46.90993
[1] 26.42593
[1] 46.90993
[1] 26.58229
[1] 46.90993
[1] 26.73866
[1] 46.90993
[1] 26.89503
[1] 46.90993
[1] 27.05139
[1] 46.90993
[1] 27.20776
[1] 46.90993
[1] 27.36413
[1] 46.90993
[1] 27.52049
[1] 46.90993
[1] 27.67686
[1] 46.90993
[1] 27.83323
[1] 46.90993
[1] 27.98959
[1] 46.90993
[1] 28.14596
[1] 46.90993
[1] 28.30233
[1] 46.90993
[1] 28.45869
[1] 46.90993
[1] 28.61506
[1] 46.90993
[1] 28.77142
[1] 46.90993
[1] 28.92779
[1] 46.90993
[1] 29.08416
[1] 46.90993
[1] 29.24052
[1] 46.90993
[1] 29.39689
[1] 46.90993
[1] 29.55326
[1] 46.90993
[1] 29.70962
[1] 46.90993
[1] 29.86599
[1] 46.90993
[1] 30.02236
[1] 46.90993
[1] 30.17872
[1] 46.90993
[1] 30.33509
[1] 46.90993
[1] 30.49146
[1] 46.90993
[1] 30.64782
[1] 46.90993
[1] 30.80419
[1] 46.90993
[1] 30.96055
[1] 46.90993
[1] 31.11692
[1] 46.90993
[1] 31.27329
[1] 46.90993
[1] 31.42965
[1] 46.90993
[1] 31.58602
[1] 46.90993
[1] 31.74239
[1] 46.90993
[1] 31.89875
[1] 46.90993
[1] 32.05512
[1] 46.90993
[1] 32.21149
[1] 46.90993
[1] 32.36785
[1] 46.90993
[1] 32.52422
[1] 46.90993
[1] 32.68059
[1] 46.90993
[1] 32.83695
[1] 46.90993
[1] 32.99332
[1] 46.90993
[1] 33.14968
[1] 46.90993
[1] 33.30605
[1] 46.90993
[1] 33.46242
[1] 46.90993
[1] 33.61878
[1] 46.90993
[1] 33.77515
[1] 46.90993
[1] 33.93152
[1] 46.90993
[1] 34.08788
[1] 46.90993
[1] 34.24425
[1] 46.90993
[1] 34.40062
[1] 46.90993
[1] 34.55698
[1] 46.90993
[1] 34.71335
[1] 46.90993
[1] 34.86972
[1] 46.90993
[1] 35.02608
[1] 46.90993
[1] 35.18245
[1] 46.90993
[1] 35.33881
[1] 46.90993
[1] 35.49518
[1] 46.90993
[1] 35.65155
[1] 46.90993
[1] 35.80791
[1] 46.90993
[1] 35.96428
[1] 46.90993
[1] 36.12065
[1] 46.90993
[1] 36.27701
[1] 46.90993
[1] 36.43338
[1] 46.90993
[1] 36.58975
[1] 46.90993
[1] 36.74611
[1] 46.90993
[1] 36.90248
[1] 46.90993
[1] 37.05885
[1] 46.90993
[1] 37.21521
[1] 46.90993
[1] 37.37158
[1] 46.90993
[1] 37.52795
[1] 46.90993
[1] 37.68431
[1] 46.90993
[1] 37.84068
[1] 46.90993
[1] 37.99704
[1] 46.90993
[1] 38.15341
[1] 46.90993
[1] 38.30978
[1] 46.90993
[1] 38.46614
[1] 46.90993
[1] 38.62251
[1] 46.90993
[1] 38.77888
[1] 46.90993
[1] 38.93524
[1] 46.90993
[1] 39.09161
[1] 46.90993
[1] 39.24798
[1] 46.90993
[1] 39.40434
[1] 46.90993
[1] 39.56071
[1] 46.90993
[1] 39.71708
[1] 46.90993
[1] 39.87344
[1] 46.90993
[1] 40.02981
[1] 46.90993
[1] 40.18617
[1] 46.90993
[1] 40.34254
[1] 46.90993
[1] 40.49891
[1] 46.90993
[1] 40.65527
[1] 46.90993
[1] 40.81164
[1] 46.90993
[1] 40.96801
[1] 46.90993
[1] 41.12437
[1] 46.90993
[1] 41.28074
[1] 46.90993
[1] 41.43711
[1] 46.90993
[1] 41.59347
[1] 46.90993
[1] 41.74984
[1] 46.90993
[1] 41.90621
[1] 46.90993
[1] 42.06257
[1] 46.90993
[1] 42.21894
[1] 46.90993
[1] 42.3753
[1] 46.90993
[1] 42.53167
[1] 46.90993
[1] 42.68804
[1] 46.90993
[1] 42.8444
[1] 46.90993
[1] 43.00077
[1] 46.90993
[1] 43.15714
[1] 46.90993
[1] 43.3135
[1] 46.90993
[1] 43.46987
[1] 46.90993
[1] 43.62624
[1] 46.90993
[1] 43.7826
[1] 46.90993
[1] 43.93897
[1] 46.90993
[1] 44.09534
[1] 46.90993
[1] 44.2517
[1] 46.90993
[1] 44.40807
[1] 46.90993
[1] 44.56443
[1] 46.90993
[1] 44.7208
[1] 46.90993
[1] 44.87717
[1] 46.90993
[1] 45.03353
[1] 46.90993
[1] 45.1899
[1] 46.90993
[1] 45.34627
[1] 46.90993
[1] 45.50263
[1] 46.90993
[1] 45.659
[1] 46.90993
[1] 45.81537
[1] 46.90993
[1] 45.97173
[1] 46.90993
[1] 46.1281
[1] 46.90993
[1] 46.28447
[1] 46.90993
[1] 46.44083
[1] 46.90993
[1] 46.5972
[1] 46.90993
[1] 46.75356
[1] 46.90993
[1] 46.90993
[1] 46.90993
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  9.670   0.112   9.943 
