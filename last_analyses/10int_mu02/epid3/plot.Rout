
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=476, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=622, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=609, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1697426
[1] 50.92278
[1] 0.3394852
[1] 50.92278
[1] 0.5092278
[1] 50.92278
[1] 0.6789704
[1] 50.92278
[1] 0.848713
[1] 50.92278
[1] 1.018456
[1] 50.92278
[1] 1.188198
[1] 50.92278
[1] 1.357941
[1] 50.92278
[1] 1.527683
[1] 50.92278
[1] 1.697426
[1] 50.92278
[1] 1.867169
[1] 50.92278
[1] 2.036911
[1] 50.92278
[1] 2.206654
[1] 50.92278
[1] 2.376396
[1] 50.92278
[1] 2.546139
[1] 50.92278
[1] 2.715882
[1] 50.92278
[1] 2.885624
[1] 50.92278
[1] 3.055367
[1] 50.92278
[1] 3.22511
[1] 50.92278
[1] 3.394852
[1] 50.92278
[1] 3.564595
[1] 50.92278
[1] 3.734337
[1] 50.92278
[1] 3.90408
[1] 50.92278
[1] 4.073823
[1] 50.92278
[1] 4.243565
[1] 50.92278
[1] 4.413308
[1] 50.92278
[1] 4.58305
[1] 50.92278
[1] 4.752793
[1] 50.92278
[1] 4.922536
[1] 50.92278
[1] 5.092278
[1] 50.92278
[1] 5.262021
[1] 50.92278
[1] 5.431763
[1] 50.92278
[1] 5.601506
[1] 50.92278
[1] 5.771249
[1] 50.92278
[1] 5.940991
[1] 50.92278
[1] 6.110734
[1] 50.92278
[1] 6.280476
[1] 50.92278
[1] 6.450219
[1] 50.92278
[1] 6.619962
[1] 50.92278
[1] 6.789704
[1] 50.92278
[1] 6.959447
[1] 50.92278
[1] 7.129189
[1] 50.92278
[1] 7.298932
[1] 50.92278
[1] 7.468675
[1] 50.92278
[1] 7.638417
[1] 50.92278
[1] 7.80816
[1] 50.92278
[1] 7.977903
[1] 50.92278
[1] 8.147645
[1] 50.92278
[1] 8.317388
[1] 50.92278
[1] 8.48713
[1] 50.92278
[1] 8.656873
[1] 50.92278
[1] 8.826616
[1] 50.92278
[1] 8.996358
[1] 50.92278
[1] 9.166101
[1] 50.92278
[1] 9.335843
[1] 50.92278
[1] 9.505586
[1] 50.92278
[1] 9.675329
[1] 50.92278
[1] 9.845071
[1] 50.92278
[1] 10.01481
[1] 50.92278
[1] 10.18456
[1] 50.92278
[1] 10.3543
[1] 50.92278
[1] 10.52404
[1] 50.92278
[1] 10.69378
[1] 50.92278
[1] 10.86353
[1] 50.92278
[1] 11.03327
[1] 50.92278
[1] 11.20301
[1] 50.92278
[1] 11.37275
[1] 50.92278
[1] 11.5425
[1] 50.92278
[1] 11.71224
[1] 50.92278
[1] 11.88198
[1] 50.92278
[1] 12.05173
[1] 50.92278
[1] 12.22147
[1] 50.92278
[1] 12.39121
[1] 50.92278
[1] 12.56095
[1] 50.92278
[1] 12.7307
[1] 50.92278
[1] 12.90044
[1] 50.92278
[1] 13.07018
[1] 50.92278
[1] 13.23992
[1] 50.92278
[1] 13.40967
[1] 50.92278
[1] 13.57941
[1] 50.92278
[1] 13.74915
[1] 50.92278
[1] 13.91889
[1] 50.92278
[1] 14.08864
[1] 50.92278
[1] 14.25838
[1] 50.92278
[1] 14.42812
[1] 50.92278
[1] 14.59786
[1] 50.92278
[1] 14.76761
[1] 50.92278
[1] 14.93735
[1] 50.92278
[1] 15.10709
[1] 50.92278
[1] 15.27683
[1] 50.92278
[1] 15.44658
[1] 50.92278
[1] 15.61632
[1] 50.92278
[1] 15.78606
[1] 50.92278
[1] 15.95581
[1] 50.92278
[1] 16.12555
[1] 50.92278
[1] 16.29529
[1] 50.92278
[1] 16.46503
[1] 50.92278
[1] 16.63478
[1] 50.92278
[1] 16.80452
[1] 50.92278
[1] 16.97426
[1] 50.92278
[1] 17.144
[1] 50.92278
[1] 17.31375
[1] 50.92278
[1] 17.48349
[1] 50.92278
[1] 17.65323
[1] 50.92278
[1] 17.82297
[1] 50.92278
[1] 17.99272
[1] 50.92278
[1] 18.16246
[1] 50.92278
[1] 18.3322
[1] 50.92278
[1] 18.50194
[1] 50.92278
[1] 18.67169
[1] 50.92278
[1] 18.84143
[1] 50.92278
[1] 19.01117
[1] 50.92278
[1] 19.18091
[1] 50.92278
[1] 19.35066
[1] 50.92278
[1] 19.5204
[1] 50.92278
[1] 19.69014
[1] 50.92278
[1] 19.85988
[1] 50.92278
[1] 20.02963
[1] 50.92278
[1] 20.19937
[1] 50.92278
[1] 20.36911
[1] 50.92278
[1] 20.53886
[1] 50.92278
[1] 20.7086
[1] 50.92278
[1] 20.87834
[1] 50.92278
[1] 21.04808
[1] 50.92278
[1] 21.21783
[1] 50.92278
[1] 21.38757
[1] 50.92278
[1] 21.55731
[1] 50.92278
[1] 21.72705
[1] 50.92278
[1] 21.8968
[1] 50.92278
[1] 22.06654
[1] 50.92278
[1] 22.23628
[1] 50.92278
[1] 22.40602
[1] 50.92278
[1] 22.57577
[1] 50.92278
[1] 22.74551
[1] 50.92278
[1] 22.91525
[1] 50.92278
[1] 23.08499
[1] 50.92278
[1] 23.25474
[1] 50.92278
[1] 23.42448
[1] 50.92278
[1] 23.59422
[1] 50.92278
[1] 23.76396
[1] 50.92278
[1] 23.93371
[1] 50.92278
[1] 24.10345
[1] 50.92278
[1] 24.27319
[1] 50.92278
[1] 24.44294
[1] 50.92278
[1] 24.61268
[1] 50.92278
[1] 24.78242
[1] 50.92278
[1] 24.95216
[1] 50.92278
[1] 25.12191
[1] 50.92278
[1] 25.29165
[1] 50.92278
[1] 25.46139
[1] 50.92278
[1] 25.63113
[1] 50.92278
[1] 25.80088
[1] 50.92278
[1] 25.97062
[1] 50.92278
[1] 26.14036
[1] 50.92278
[1] 26.3101
[1] 50.92278
[1] 26.47985
[1] 50.92278
[1] 26.64959
[1] 50.92278
[1] 26.81933
[1] 50.92278
[1] 26.98907
[1] 50.92278
[1] 27.15882
[1] 50.92278
[1] 27.32856
[1] 50.92278
[1] 27.4983
[1] 50.92278
[1] 27.66804
[1] 50.92278
[1] 27.83779
[1] 50.92278
[1] 28.00753
[1] 50.92278
[1] 28.17727
[1] 50.92278
[1] 28.34702
[1] 50.92278
[1] 28.51676
[1] 50.92278
[1] 28.6865
[1] 50.92278
[1] 28.85624
[1] 50.92278
[1] 29.02599
[1] 50.92278
[1] 29.19573
[1] 50.92278
[1] 29.36547
[1] 50.92278
[1] 29.53521
[1] 50.92278
[1] 29.70496
[1] 50.92278
[1] 29.8747
[1] 50.92278
[1] 30.04444
[1] 50.92278
[1] 30.21418
[1] 50.92278
[1] 30.38393
[1] 50.92278
[1] 30.55367
[1] 50.92278
[1] 30.72341
[1] 50.92278
[1] 30.89315
[1] 50.92278
[1] 31.0629
[1] 50.92278
[1] 31.23264
[1] 50.92278
[1] 31.40238
[1] 50.92278
[1] 31.57212
[1] 50.92278
[1] 31.74187
[1] 50.92278
[1] 31.91161
[1] 50.92278
[1] 32.08135
[1] 50.92278
[1] 32.2511
[1] 50.92278
[1] 32.42084
[1] 50.92278
[1] 32.59058
[1] 50.92278
[1] 32.76032
[1] 50.92278
[1] 32.93007
[1] 50.92278
[1] 33.09981
[1] 50.92278
[1] 33.26955
[1] 50.92278
[1] 33.43929
[1] 50.92278
[1] 33.60904
[1] 50.92278
[1] 33.77878
[1] 50.92278
[1] 33.94852
[1] 50.92278
[1] 34.11826
[1] 50.92278
[1] 34.28801
[1] 50.92278
[1] 34.45775
[1] 50.92278
[1] 34.62749
[1] 50.92278
[1] 34.79723
[1] 50.92278
[1] 34.96698
[1] 50.92278
[1] 35.13672
[1] 50.92278
[1] 35.30646
[1] 50.92278
[1] 35.4762
[1] 50.92278
[1] 35.64595
[1] 50.92278
[1] 35.81569
[1] 50.92278
[1] 35.98543
[1] 50.92278
[1] 36.15518
[1] 50.92278
[1] 36.32492
[1] 50.92278
[1] 36.49466
[1] 50.92278
[1] 36.6644
[1] 50.92278
[1] 36.83415
[1] 50.92278
[1] 37.00389
[1] 50.92278
[1] 37.17363
[1] 50.92278
[1] 37.34337
[1] 50.92278
[1] 37.51312
[1] 50.92278
[1] 37.68286
[1] 50.92278
[1] 37.8526
[1] 50.92278
[1] 38.02234
[1] 50.92278
[1] 38.19209
[1] 50.92278
[1] 38.36183
[1] 50.92278
[1] 38.53157
[1] 50.92278
[1] 38.70131
[1] 50.92278
[1] 38.87106
[1] 50.92278
[1] 39.0408
[1] 50.92278
[1] 39.21054
[1] 50.92278
[1] 39.38028
[1] 50.92278
[1] 39.55003
[1] 50.92278
[1] 39.71977
[1] 50.92278
[1] 39.88951
[1] 50.92278
[1] 40.05926
[1] 50.92278
[1] 40.229
[1] 50.92278
[1] 40.39874
[1] 50.92278
[1] 40.56848
[1] 50.92278
[1] 40.73823
[1] 50.92278
[1] 40.90797
[1] 50.92278
[1] 41.07771
[1] 50.92278
[1] 41.24745
[1] 50.92278
[1] 41.4172
[1] 50.92278
[1] 41.58694
[1] 50.92278
[1] 41.75668
[1] 50.92278
[1] 41.92642
[1] 50.92278
[1] 42.09617
[1] 50.92278
[1] 42.26591
[1] 50.92278
[1] 42.43565
[1] 50.92278
[1] 42.60539
[1] 50.92278
[1] 42.77514
[1] 50.92278
[1] 42.94488
[1] 50.92278
[1] 43.11462
[1] 50.92278
[1] 43.28436
[1] 50.92278
[1] 43.45411
[1] 50.92278
[1] 43.62385
[1] 50.92278
[1] 43.79359
[1] 50.92278
[1] 43.96334
[1] 50.92278
[1] 44.13308
[1] 50.92278
[1] 44.30282
[1] 50.92278
[1] 44.47256
[1] 50.92278
[1] 44.64231
[1] 50.92278
[1] 44.81205
[1] 50.92278
[1] 44.98179
[1] 50.92278
[1] 45.15153
[1] 50.92278
[1] 45.32128
[1] 50.92278
[1] 45.49102
[1] 50.92278
[1] 45.66076
[1] 50.92278
[1] 45.8305
[1] 50.92278
[1] 46.00025
[1] 50.92278
[1] 46.16999
[1] 50.92278
[1] 46.33973
[1] 50.92278
[1] 46.50947
[1] 50.92278
[1] 46.67922
[1] 50.92278
[1] 46.84896
[1] 50.92278
[1] 47.0187
[1] 50.92278
[1] 47.18844
[1] 50.92278
[1] 47.35819
[1] 50.92278
[1] 47.52793
[1] 50.92278
[1] 47.69767
[1] 50.92278
[1] 47.86742
[1] 50.92278
[1] 48.03716
[1] 50.92278
[1] 48.2069
[1] 50.92278
[1] 48.37664
[1] 50.92278
[1] 48.54639
[1] 50.92278
[1] 48.71613
[1] 50.92278
[1] 48.88587
[1] 50.92278
[1] 49.05561
[1] 50.92278
[1] 49.22536
[1] 50.92278
[1] 49.3951
[1] 50.92278
[1] 49.56484
[1] 50.92278
[1] 49.73458
[1] 50.92278
[1] 49.90433
[1] 50.92278
[1] 50.07407
[1] 50.92278
[1] 50.24381
[1] 50.92278
[1] 50.41355
[1] 50.92278
[1] 50.5833
[1] 50.92278
[1] 50.75304
[1] 50.92278
[1] 50.92278
[1] 50.92278
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 33.140   1.612  61.376 
