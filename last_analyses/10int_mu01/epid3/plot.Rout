
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=476, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=622, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=609, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1699018
[1] 50.97054
[1] 0.3398036
[1] 50.97054
[1] 0.5097054
[1] 50.97054
[1] 0.6796072
[1] 50.97054
[1] 0.8495089
[1] 50.97054
[1] 1.019411
[1] 50.97054
[1] 1.189313
[1] 50.97054
[1] 1.359214
[1] 50.97054
[1] 1.529116
[1] 50.97054
[1] 1.699018
[1] 50.97054
[1] 1.86892
[1] 50.97054
[1] 2.038821
[1] 50.97054
[1] 2.208723
[1] 50.97054
[1] 2.378625
[1] 50.97054
[1] 2.548527
[1] 50.97054
[1] 2.718429
[1] 50.97054
[1] 2.88833
[1] 50.97054
[1] 3.058232
[1] 50.97054
[1] 3.228134
[1] 50.97054
[1] 3.398036
[1] 50.97054
[1] 3.567938
[1] 50.97054
[1] 3.737839
[1] 50.97054
[1] 3.907741
[1] 50.97054
[1] 4.077643
[1] 50.97054
[1] 4.247545
[1] 50.97054
[1] 4.417447
[1] 50.97054
[1] 4.587348
[1] 50.97054
[1] 4.75725
[1] 50.97054
[1] 4.927152
[1] 50.97054
[1] 5.097054
[1] 50.97054
[1] 5.266955
[1] 50.97054
[1] 5.436857
[1] 50.97054
[1] 5.606759
[1] 50.97054
[1] 5.776661
[1] 50.97054
[1] 5.946563
[1] 50.97054
[1] 6.116464
[1] 50.97054
[1] 6.286366
[1] 50.97054
[1] 6.456268
[1] 50.97054
[1] 6.62617
[1] 50.97054
[1] 6.796072
[1] 50.97054
[1] 6.965973
[1] 50.97054
[1] 7.135875
[1] 50.97054
[1] 7.305777
[1] 50.97054
[1] 7.475679
[1] 50.97054
[1] 7.645581
[1] 50.97054
[1] 7.815482
[1] 50.97054
[1] 7.985384
[1] 50.97054
[1] 8.155286
[1] 50.97054
[1] 8.325188
[1] 50.97054
[1] 8.495089
[1] 50.97054
[1] 8.664991
[1] 50.97054
[1] 8.834893
[1] 50.97054
[1] 9.004795
[1] 50.97054
[1] 9.174697
[1] 50.97054
[1] 9.344598
[1] 50.97054
[1] 9.5145
[1] 50.97054
[1] 9.684402
[1] 50.97054
[1] 9.854304
[1] 50.97054
[1] 10.02421
[1] 50.97054
[1] 10.19411
[1] 50.97054
[1] 10.36401
[1] 50.97054
[1] 10.53391
[1] 50.97054
[1] 10.70381
[1] 50.97054
[1] 10.87371
[1] 50.97054
[1] 11.04362
[1] 50.97054
[1] 11.21352
[1] 50.97054
[1] 11.38342
[1] 50.97054
[1] 11.55332
[1] 50.97054
[1] 11.72322
[1] 50.97054
[1] 11.89313
[1] 50.97054
[1] 12.06303
[1] 50.97054
[1] 12.23293
[1] 50.97054
[1] 12.40283
[1] 50.97054
[1] 12.57273
[1] 50.97054
[1] 12.74263
[1] 50.97054
[1] 12.91254
[1] 50.97054
[1] 13.08244
[1] 50.97054
[1] 13.25234
[1] 50.97054
[1] 13.42224
[1] 50.97054
[1] 13.59214
[1] 50.97054
[1] 13.76204
[1] 50.97054
[1] 13.93195
[1] 50.97054
[1] 14.10185
[1] 50.97054
[1] 14.27175
[1] 50.97054
[1] 14.44165
[1] 50.97054
[1] 14.61155
[1] 50.97054
[1] 14.78146
[1] 50.97054
[1] 14.95136
[1] 50.97054
[1] 15.12126
[1] 50.97054
[1] 15.29116
[1] 50.97054
[1] 15.46106
[1] 50.97054
[1] 15.63096
[1] 50.97054
[1] 15.80087
[1] 50.97054
[1] 15.97077
[1] 50.97054
[1] 16.14067
[1] 50.97054
[1] 16.31057
[1] 50.97054
[1] 16.48047
[1] 50.97054
[1] 16.65038
[1] 50.97054
[1] 16.82028
[1] 50.97054
[1] 16.99018
[1] 50.97054
[1] 17.16008
[1] 50.97054
[1] 17.32998
[1] 50.97054
[1] 17.49988
[1] 50.97054
[1] 17.66979
[1] 50.97054
[1] 17.83969
[1] 50.97054
[1] 18.00959
[1] 50.97054
[1] 18.17949
[1] 50.97054
[1] 18.34939
[1] 50.97054
[1] 18.5193
[1] 50.97054
[1] 18.6892
[1] 50.97054
[1] 18.8591
[1] 50.97054
[1] 19.029
[1] 50.97054
[1] 19.1989
[1] 50.97054
[1] 19.3688
[1] 50.97054
[1] 19.53871
[1] 50.97054
[1] 19.70861
[1] 50.97054
[1] 19.87851
[1] 50.97054
[1] 20.04841
[1] 50.97054
[1] 20.21831
[1] 50.97054
[1] 20.38821
[1] 50.97054
[1] 20.55812
[1] 50.97054
[1] 20.72802
[1] 50.97054
[1] 20.89792
[1] 50.97054
[1] 21.06782
[1] 50.97054
[1] 21.23772
[1] 50.97054
[1] 21.40763
[1] 50.97054
[1] 21.57753
[1] 50.97054
[1] 21.74743
[1] 50.97054
[1] 21.91733
[1] 50.97054
[1] 22.08723
[1] 50.97054
[1] 22.25713
[1] 50.97054
[1] 22.42704
[1] 50.97054
[1] 22.59694
[1] 50.97054
[1] 22.76684
[1] 50.97054
[1] 22.93674
[1] 50.97054
[1] 23.10664
[1] 50.97054
[1] 23.27655
[1] 50.97054
[1] 23.44645
[1] 50.97054
[1] 23.61635
[1] 50.97054
[1] 23.78625
[1] 50.97054
[1] 23.95615
[1] 50.97054
[1] 24.12605
[1] 50.97054
[1] 24.29596
[1] 50.97054
[1] 24.46586
[1] 50.97054
[1] 24.63576
[1] 50.97054
[1] 24.80566
[1] 50.97054
[1] 24.97556
[1] 50.97054
[1] 25.14546
[1] 50.97054
[1] 25.31537
[1] 50.97054
[1] 25.48527
[1] 50.97054
[1] 25.65517
[1] 50.97054
[1] 25.82507
[1] 50.97054
[1] 25.99497
[1] 50.97054
[1] 26.16488
[1] 50.97054
[1] 26.33478
[1] 50.97054
[1] 26.50468
[1] 50.97054
[1] 26.67458
[1] 50.97054
[1] 26.84448
[1] 50.97054
[1] 27.01438
[1] 50.97054
[1] 27.18429
[1] 50.97054
[1] 27.35419
[1] 50.97054
[1] 27.52409
[1] 50.97054
[1] 27.69399
[1] 50.97054
[1] 27.86389
[1] 50.97054
[1] 28.0338
[1] 50.97054
[1] 28.2037
[1] 50.97054
[1] 28.3736
[1] 50.97054
[1] 28.5435
[1] 50.97054
[1] 28.7134
[1] 50.97054
[1] 28.8833
[1] 50.97054
[1] 29.05321
[1] 50.97054
[1] 29.22311
[1] 50.97054
[1] 29.39301
[1] 50.97054
[1] 29.56291
[1] 50.97054
[1] 29.73281
[1] 50.97054
[1] 29.90271
[1] 50.97054
[1] 30.07262
[1] 50.97054
[1] 30.24252
[1] 50.97054
[1] 30.41242
[1] 50.97054
[1] 30.58232
[1] 50.97054
[1] 30.75222
[1] 50.97054
[1] 30.92213
[1] 50.97054
[1] 31.09203
[1] 50.97054
[1] 31.26193
[1] 50.97054
[1] 31.43183
[1] 50.97054
[1] 31.60173
[1] 50.97054
[1] 31.77163
[1] 50.97054
[1] 31.94154
[1] 50.97054
[1] 32.11144
[1] 50.97054
[1] 32.28134
[1] 50.97054
[1] 32.45124
[1] 50.97054
[1] 32.62114
[1] 50.97054
[1] 32.79105
[1] 50.97054
[1] 32.96095
[1] 50.97054
[1] 33.13085
[1] 50.97054
[1] 33.30075
[1] 50.97054
[1] 33.47065
[1] 50.97054
[1] 33.64055
[1] 50.97054
[1] 33.81046
[1] 50.97054
[1] 33.98036
[1] 50.97054
[1] 34.15026
[1] 50.97054
[1] 34.32016
[1] 50.97054
[1] 34.49006
[1] 50.97054
[1] 34.65996
[1] 50.97054
[1] 34.82987
[1] 50.97054
[1] 34.99977
[1] 50.97054
[1] 35.16967
[1] 50.97054
[1] 35.33957
[1] 50.97054
[1] 35.50947
[1] 50.97054
[1] 35.67938
[1] 50.97054
[1] 35.84928
[1] 50.97054
[1] 36.01918
[1] 50.97054
[1] 36.18908
[1] 50.97054
[1] 36.35898
[1] 50.97054
[1] 36.52888
[1] 50.97054
[1] 36.69879
[1] 50.97054
[1] 36.86869
[1] 50.97054
[1] 37.03859
[1] 50.97054
[1] 37.20849
[1] 50.97054
[1] 37.37839
[1] 50.97054
[1] 37.5483
[1] 50.97054
[1] 37.7182
[1] 50.97054
[1] 37.8881
[1] 50.97054
[1] 38.058
[1] 50.97054
[1] 38.2279
[1] 50.97054
[1] 38.3978
[1] 50.97054
[1] 38.56771
[1] 50.97054
[1] 38.73761
[1] 50.97054
[1] 38.90751
[1] 50.97054
[1] 39.07741
[1] 50.97054
[1] 39.24731
[1] 50.97054
[1] 39.41722
[1] 50.97054
[1] 39.58712
[1] 50.97054
[1] 39.75702
[1] 50.97054
[1] 39.92692
[1] 50.97054
[1] 40.09682
[1] 50.97054
[1] 40.26672
[1] 50.97054
[1] 40.43663
[1] 50.97054
[1] 40.60653
[1] 50.97054
[1] 40.77643
[1] 50.97054
[1] 40.94633
[1] 50.97054
[1] 41.11623
[1] 50.97054
[1] 41.28613
[1] 50.97054
[1] 41.45604
[1] 50.97054
[1] 41.62594
[1] 50.97054
[1] 41.79584
[1] 50.97054
[1] 41.96574
[1] 50.97054
[1] 42.13564
[1] 50.97054
[1] 42.30555
[1] 50.97054
[1] 42.47545
[1] 50.97054
[1] 42.64535
[1] 50.97054
[1] 42.81525
[1] 50.97054
[1] 42.98515
[1] 50.97054
[1] 43.15505
[1] 50.97054
[1] 43.32496
[1] 50.97054
[1] 43.49486
[1] 50.97054
[1] 43.66476
[1] 50.97054
[1] 43.83466
[1] 50.97054
[1] 44.00456
[1] 50.97054
[1] 44.17447
[1] 50.97054
[1] 44.34437
[1] 50.97054
[1] 44.51427
[1] 50.97054
[1] 44.68417
[1] 50.97054
[1] 44.85407
[1] 50.97054
[1] 45.02397
[1] 50.97054
[1] 45.19388
[1] 50.97054
[1] 45.36378
[1] 50.97054
[1] 45.53368
[1] 50.97054
[1] 45.70358
[1] 50.97054
[1] 45.87348
[1] 50.97054
[1] 46.04338
[1] 50.97054
[1] 46.21329
[1] 50.97054
[1] 46.38319
[1] 50.97054
[1] 46.55309
[1] 50.97054
[1] 46.72299
[1] 50.97054
[1] 46.89289
[1] 50.97054
[1] 47.0628
[1] 50.97054
[1] 47.2327
[1] 50.97054
[1] 47.4026
[1] 50.97054
[1] 47.5725
[1] 50.97054
[1] 47.7424
[1] 50.97054
[1] 47.9123
[1] 50.97054
[1] 48.08221
[1] 50.97054
[1] 48.25211
[1] 50.97054
[1] 48.42201
[1] 50.97054
[1] 48.59191
[1] 50.97054
[1] 48.76181
[1] 50.97054
[1] 48.93172
[1] 50.97054
[1] 49.10162
[1] 50.97054
[1] 49.27152
[1] 50.97054
[1] 49.44142
[1] 50.97054
[1] 49.61132
[1] 50.97054
[1] 49.78122
[1] 50.97054
[1] 49.95113
[1] 50.97054
[1] 50.12103
[1] 50.97054
[1] 50.29093
[1] 50.97054
[1] 50.46083
[1] 50.97054
[1] 50.63073
[1] 50.97054
[1] 50.80063
[1] 50.97054
[1] 50.97054
[1] 50.97054
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,8)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 18.236   0.447  18.987 
