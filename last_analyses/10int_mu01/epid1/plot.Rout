
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=641, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=562, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=601, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1647332
[1] 49.41996
[1] 0.3294664
[1] 49.41996
[1] 0.4941996
[1] 49.41996
[1] 0.6589328
[1] 49.41996
[1] 0.823666
[1] 49.41996
[1] 0.9883992
[1] 49.41996
[1] 1.153132
[1] 49.41996
[1] 1.317866
[1] 49.41996
[1] 1.482599
[1] 49.41996
[1] 1.647332
[1] 49.41996
[1] 1.812065
[1] 49.41996
[1] 1.976798
[1] 49.41996
[1] 2.141532
[1] 49.41996
[1] 2.306265
[1] 49.41996
[1] 2.470998
[1] 49.41996
[1] 2.635731
[1] 49.41996
[1] 2.800464
[1] 49.41996
[1] 2.965198
[1] 49.41996
[1] 3.129931
[1] 49.41996
[1] 3.294664
[1] 49.41996
[1] 3.459397
[1] 49.41996
[1] 3.62413
[1] 49.41996
[1] 3.788864
[1] 49.41996
[1] 3.953597
[1] 49.41996
[1] 4.11833
[1] 49.41996
[1] 4.283063
[1] 49.41996
[1] 4.447796
[1] 49.41996
[1] 4.61253
[1] 49.41996
[1] 4.777263
[1] 49.41996
[1] 4.941996
[1] 49.41996
[1] 5.106729
[1] 49.41996
[1] 5.271462
[1] 49.41996
[1] 5.436196
[1] 49.41996
[1] 5.600929
[1] 49.41996
[1] 5.765662
[1] 49.41996
[1] 5.930395
[1] 49.41996
[1] 6.095128
[1] 49.41996
[1] 6.259862
[1] 49.41996
[1] 6.424595
[1] 49.41996
[1] 6.589328
[1] 49.41996
[1] 6.754061
[1] 49.41996
[1] 6.918794
[1] 49.41996
[1] 7.083528
[1] 49.41996
[1] 7.248261
[1] 49.41996
[1] 7.412994
[1] 49.41996
[1] 7.577727
[1] 49.41996
[1] 7.74246
[1] 49.41996
[1] 7.907194
[1] 49.41996
[1] 8.071927
[1] 49.41996
[1] 8.23666
[1] 49.41996
[1] 8.401393
[1] 49.41996
[1] 8.566126
[1] 49.41996
[1] 8.73086
[1] 49.41996
[1] 8.895593
[1] 49.41996
[1] 9.060326
[1] 49.41996
[1] 9.225059
[1] 49.41996
[1] 9.389792
[1] 49.41996
[1] 9.554526
[1] 49.41996
[1] 9.719259
[1] 49.41996
[1] 9.883992
[1] 49.41996
[1] 10.04873
[1] 49.41996
[1] 10.21346
[1] 49.41996
[1] 10.37819
[1] 49.41996
[1] 10.54292
[1] 49.41996
[1] 10.70766
[1] 49.41996
[1] 10.87239
[1] 49.41996
[1] 11.03712
[1] 49.41996
[1] 11.20186
[1] 49.41996
[1] 11.36659
[1] 49.41996
[1] 11.53132
[1] 49.41996
[1] 11.69606
[1] 49.41996
[1] 11.86079
[1] 49.41996
[1] 12.02552
[1] 49.41996
[1] 12.19026
[1] 49.41996
[1] 12.35499
[1] 49.41996
[1] 12.51972
[1] 49.41996
[1] 12.68446
[1] 49.41996
[1] 12.84919
[1] 49.41996
[1] 13.01392
[1] 49.41996
[1] 13.17866
[1] 49.41996
[1] 13.34339
[1] 49.41996
[1] 13.50812
[1] 49.41996
[1] 13.67286
[1] 49.41996
[1] 13.83759
[1] 49.41996
[1] 14.00232
[1] 49.41996
[1] 14.16706
[1] 49.41996
[1] 14.33179
[1] 49.41996
[1] 14.49652
[1] 49.41996
[1] 14.66125
[1] 49.41996
[1] 14.82599
[1] 49.41996
[1] 14.99072
[1] 49.41996
[1] 15.15545
[1] 49.41996
[1] 15.32019
[1] 49.41996
[1] 15.48492
[1] 49.41996
[1] 15.64965
[1] 49.41996
[1] 15.81439
[1] 49.41996
[1] 15.97912
[1] 49.41996
[1] 16.14385
[1] 49.41996
[1] 16.30859
[1] 49.41996
[1] 16.47332
[1] 49.41996
[1] 16.63805
[1] 49.41996
[1] 16.80279
[1] 49.41996
[1] 16.96752
[1] 49.41996
[1] 17.13225
[1] 49.41996
[1] 17.29699
[1] 49.41996
[1] 17.46172
[1] 49.41996
[1] 17.62645
[1] 49.41996
[1] 17.79119
[1] 49.41996
[1] 17.95592
[1] 49.41996
[1] 18.12065
[1] 49.41996
[1] 18.28539
[1] 49.41996
[1] 18.45012
[1] 49.41996
[1] 18.61485
[1] 49.41996
[1] 18.77958
[1] 49.41996
[1] 18.94432
[1] 49.41996
[1] 19.10905
[1] 49.41996
[1] 19.27378
[1] 49.41996
[1] 19.43852
[1] 49.41996
[1] 19.60325
[1] 49.41996
[1] 19.76798
[1] 49.41996
[1] 19.93272
[1] 49.41996
[1] 20.09745
[1] 49.41996
[1] 20.26218
[1] 49.41996
[1] 20.42692
[1] 49.41996
[1] 20.59165
[1] 49.41996
[1] 20.75638
[1] 49.41996
[1] 20.92112
[1] 49.41996
[1] 21.08585
[1] 49.41996
[1] 21.25058
[1] 49.41996
[1] 21.41532
[1] 49.41996
[1] 21.58005
[1] 49.41996
[1] 21.74478
[1] 49.41996
[1] 21.90952
[1] 49.41996
[1] 22.07425
[1] 49.41996
[1] 22.23898
[1] 49.41996
[1] 22.40372
[1] 49.41996
[1] 22.56845
[1] 49.41996
[1] 22.73318
[1] 49.41996
[1] 22.89791
[1] 49.41996
[1] 23.06265
[1] 49.41996
[1] 23.22738
[1] 49.41996
[1] 23.39211
[1] 49.41996
[1] 23.55685
[1] 49.41996
[1] 23.72158
[1] 49.41996
[1] 23.88631
[1] 49.41996
[1] 24.05105
[1] 49.41996
[1] 24.21578
[1] 49.41996
[1] 24.38051
[1] 49.41996
[1] 24.54525
[1] 49.41996
[1] 24.70998
[1] 49.41996
[1] 24.87471
[1] 49.41996
[1] 25.03945
[1] 49.41996
[1] 25.20418
[1] 49.41996
[1] 25.36891
[1] 49.41996
[1] 25.53365
[1] 49.41996
[1] 25.69838
[1] 49.41996
[1] 25.86311
[1] 49.41996
[1] 26.02785
[1] 49.41996
[1] 26.19258
[1] 49.41996
[1] 26.35731
[1] 49.41996
[1] 26.52205
[1] 49.41996
[1] 26.68678
[1] 49.41996
[1] 26.85151
[1] 49.41996
[1] 27.01624
[1] 49.41996
[1] 27.18098
[1] 49.41996
[1] 27.34571
[1] 49.41996
[1] 27.51044
[1] 49.41996
[1] 27.67518
[1] 49.41996
[1] 27.83991
[1] 49.41996
[1] 28.00464
[1] 49.41996
[1] 28.16938
[1] 49.41996
[1] 28.33411
[1] 49.41996
[1] 28.49884
[1] 49.41996
[1] 28.66358
[1] 49.41996
[1] 28.82831
[1] 49.41996
[1] 28.99304
[1] 49.41996
[1] 29.15778
[1] 49.41996
[1] 29.32251
[1] 49.41996
[1] 29.48724
[1] 49.41996
[1] 29.65198
[1] 49.41996
[1] 29.81671
[1] 49.41996
[1] 29.98144
[1] 49.41996
[1] 30.14618
[1] 49.41996
[1] 30.31091
[1] 49.41996
[1] 30.47564
[1] 49.41996
[1] 30.64038
[1] 49.41996
[1] 30.80511
[1] 49.41996
[1] 30.96984
[1] 49.41996
[1] 31.13457
[1] 49.41996
[1] 31.29931
[1] 49.41996
[1] 31.46404
[1] 49.41996
[1] 31.62877
[1] 49.41996
[1] 31.79351
[1] 49.41996
[1] 31.95824
[1] 49.41996
[1] 32.12297
[1] 49.41996
[1] 32.28771
[1] 49.41996
[1] 32.45244
[1] 49.41996
[1] 32.61717
[1] 49.41996
[1] 32.78191
[1] 49.41996
[1] 32.94664
[1] 49.41996
[1] 33.11137
[1] 49.41996
[1] 33.27611
[1] 49.41996
[1] 33.44084
[1] 49.41996
[1] 33.60557
[1] 49.41996
[1] 33.77031
[1] 49.41996
[1] 33.93504
[1] 49.41996
[1] 34.09977
[1] 49.41996
[1] 34.26451
[1] 49.41996
[1] 34.42924
[1] 49.41996
[1] 34.59397
[1] 49.41996
[1] 34.75871
[1] 49.41996
[1] 34.92344
[1] 49.41996
[1] 35.08817
[1] 49.41996
[1] 35.2529
[1] 49.41996
[1] 35.41764
[1] 49.41996
[1] 35.58237
[1] 49.41996
[1] 35.7471
[1] 49.41996
[1] 35.91184
[1] 49.41996
[1] 36.07657
[1] 49.41996
[1] 36.2413
[1] 49.41996
[1] 36.40604
[1] 49.41996
[1] 36.57077
[1] 49.41996
[1] 36.7355
[1] 49.41996
[1] 36.90024
[1] 49.41996
[1] 37.06497
[1] 49.41996
[1] 37.2297
[1] 49.41996
[1] 37.39444
[1] 49.41996
[1] 37.55917
[1] 49.41996
[1] 37.7239
[1] 49.41996
[1] 37.88864
[1] 49.41996
[1] 38.05337
[1] 49.41996
[1] 38.2181
[1] 49.41996
[1] 38.38284
[1] 49.41996
[1] 38.54757
[1] 49.41996
[1] 38.7123
[1] 49.41996
[1] 38.87703
[1] 49.41996
[1] 39.04177
[1] 49.41996
[1] 39.2065
[1] 49.41996
[1] 39.37123
[1] 49.41996
[1] 39.53597
[1] 49.41996
[1] 39.7007
[1] 49.41996
[1] 39.86543
[1] 49.41996
[1] 40.03017
[1] 49.41996
[1] 40.1949
[1] 49.41996
[1] 40.35963
[1] 49.41996
[1] 40.52437
[1] 49.41996
[1] 40.6891
[1] 49.41996
[1] 40.85383
[1] 49.41996
[1] 41.01857
[1] 49.41996
[1] 41.1833
[1] 49.41996
[1] 41.34803
[1] 49.41996
[1] 41.51277
[1] 49.41996
[1] 41.6775
[1] 49.41996
[1] 41.84223
[1] 49.41996
[1] 42.00697
[1] 49.41996
[1] 42.1717
[1] 49.41996
[1] 42.33643
[1] 49.41996
[1] 42.50117
[1] 49.41996
[1] 42.6659
[1] 49.41996
[1] 42.83063
[1] 49.41996
[1] 42.99536
[1] 49.41996
[1] 43.1601
[1] 49.41996
[1] 43.32483
[1] 49.41996
[1] 43.48956
[1] 49.41996
[1] 43.6543
[1] 49.41996
[1] 43.81903
[1] 49.41996
[1] 43.98376
[1] 49.41996
[1] 44.1485
[1] 49.41996
[1] 44.31323
[1] 49.41996
[1] 44.47796
[1] 49.41996
[1] 44.6427
[1] 49.41996
[1] 44.80743
[1] 49.41996
[1] 44.97216
[1] 49.41996
[1] 45.1369
[1] 49.41996
[1] 45.30163
[1] 49.41996
[1] 45.46636
[1] 49.41996
[1] 45.6311
[1] 49.41996
[1] 45.79583
[1] 49.41996
[1] 45.96056
[1] 49.41996
[1] 46.1253
[1] 49.41996
[1] 46.29003
[1] 49.41996
[1] 46.45476
[1] 49.41996
[1] 46.6195
[1] 49.41996
[1] 46.78423
[1] 49.41996
[1] 46.94896
[1] 49.41996
[1] 47.11369
[1] 49.41996
[1] 47.27843
[1] 49.41996
[1] 47.44316
[1] 49.41996
[1] 47.60789
[1] 49.41996
[1] 47.77263
[1] 49.41996
[1] 47.93736
[1] 49.41996
[1] 48.10209
[1] 49.41996
[1] 48.26683
[1] 49.41996
[1] 48.43156
[1] 49.41996
[1] 48.59629
[1] 49.41996
[1] 48.76103
[1] 49.41996
[1] 48.92576
[1] 49.41996
[1] 49.09049
[1] 49.41996
[1] 49.25523
[1] 49.41996
[1] 49.41996
[1] 49.41996
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 13.648   0.363  14.265 
