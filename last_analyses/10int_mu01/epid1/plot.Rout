
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=641, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=562, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=601, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:10) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1646934
[1] 49.40801
[1] 0.3293867
[1] 49.40801
[1] 0.4940801
[1] 49.40801
[1] 0.6587734
[1] 49.40801
[1] 0.8234668
[1] 49.40801
[1] 0.9881602
[1] 49.40801
[1] 1.152854
[1] 49.40801
[1] 1.317547
[1] 49.40801
[1] 1.48224
[1] 49.40801
[1] 1.646934
[1] 49.40801
[1] 1.811627
[1] 49.40801
[1] 1.97632
[1] 49.40801
[1] 2.141014
[1] 49.40801
[1] 2.305707
[1] 49.40801
[1] 2.4704
[1] 49.40801
[1] 2.635094
[1] 49.40801
[1] 2.799787
[1] 49.40801
[1] 2.96448
[1] 49.40801
[1] 3.129174
[1] 49.40801
[1] 3.293867
[1] 49.40801
[1] 3.458561
[1] 49.40801
[1] 3.623254
[1] 49.40801
[1] 3.787947
[1] 49.40801
[1] 3.952641
[1] 49.40801
[1] 4.117334
[1] 49.40801
[1] 4.282027
[1] 49.40801
[1] 4.446721
[1] 49.40801
[1] 4.611414
[1] 49.40801
[1] 4.776107
[1] 49.40801
[1] 4.940801
[1] 49.40801
[1] 5.105494
[1] 49.40801
[1] 5.270188
[1] 49.40801
[1] 5.434881
[1] 49.40801
[1] 5.599574
[1] 49.40801
[1] 5.764268
[1] 49.40801
[1] 5.928961
[1] 49.40801
[1] 6.093654
[1] 49.40801
[1] 6.258348
[1] 49.40801
[1] 6.423041
[1] 49.40801
[1] 6.587734
[1] 49.40801
[1] 6.752428
[1] 49.40801
[1] 6.917121
[1] 49.40801
[1] 7.081815
[1] 49.40801
[1] 7.246508
[1] 49.40801
[1] 7.411201
[1] 49.40801
[1] 7.575895
[1] 49.40801
[1] 7.740588
[1] 49.40801
[1] 7.905281
[1] 49.40801
[1] 8.069975
[1] 49.40801
[1] 8.234668
[1] 49.40801
[1] 8.399361
[1] 49.40801
[1] 8.564055
[1] 49.40801
[1] 8.728748
[1] 49.40801
[1] 8.893441
[1] 49.40801
[1] 9.058135
[1] 49.40801
[1] 9.222828
[1] 49.40801
[1] 9.387522
[1] 49.40801
[1] 9.552215
[1] 49.40801
[1] 9.716908
[1] 49.40801
[1] 9.881602
[1] 49.40801
[1] 10.0463
[1] 49.40801
[1] 10.21099
[1] 49.40801
[1] 10.37568
[1] 49.40801
[1] 10.54038
[1] 49.40801
[1] 10.70507
[1] 49.40801
[1] 10.86976
[1] 49.40801
[1] 11.03446
[1] 49.40801
[1] 11.19915
[1] 49.40801
[1] 11.36384
[1] 49.40801
[1] 11.52854
[1] 49.40801
[1] 11.69323
[1] 49.40801
[1] 11.85792
[1] 49.40801
[1] 12.02262
[1] 49.40801
[1] 12.18731
[1] 49.40801
[1] 12.352
[1] 49.40801
[1] 12.5167
[1] 49.40801
[1] 12.68139
[1] 49.40801
[1] 12.84608
[1] 49.40801
[1] 13.01078
[1] 49.40801
[1] 13.17547
[1] 49.40801
[1] 13.34016
[1] 49.40801
[1] 13.50486
[1] 49.40801
[1] 13.66955
[1] 49.40801
[1] 13.83424
[1] 49.40801
[1] 13.99894
[1] 49.40801
[1] 14.16363
[1] 49.40801
[1] 14.32832
[1] 49.40801
[1] 14.49302
[1] 49.40801
[1] 14.65771
[1] 49.40801
[1] 14.8224
[1] 49.40801
[1] 14.9871
[1] 49.40801
[1] 15.15179
[1] 49.40801
[1] 15.31648
[1] 49.40801
[1] 15.48118
[1] 49.40801
[1] 15.64587
[1] 49.40801
[1] 15.81056
[1] 49.40801
[1] 15.97526
[1] 49.40801
[1] 16.13995
[1] 49.40801
[1] 16.30464
[1] 49.40801
[1] 16.46934
[1] 49.40801
[1] 16.63403
[1] 49.40801
[1] 16.79872
[1] 49.40801
[1] 16.96342
[1] 49.40801
[1] 17.12811
[1] 49.40801
[1] 17.2928
[1] 49.40801
[1] 17.4575
[1] 49.40801
[1] 17.62219
[1] 49.40801
[1] 17.78688
[1] 49.40801
[1] 17.95158
[1] 49.40801
[1] 18.11627
[1] 49.40801
[1] 18.28096
[1] 49.40801
[1] 18.44566
[1] 49.40801
[1] 18.61035
[1] 49.40801
[1] 18.77504
[1] 49.40801
[1] 18.93974
[1] 49.40801
[1] 19.10443
[1] 49.40801
[1] 19.26912
[1] 49.40801
[1] 19.43382
[1] 49.40801
[1] 19.59851
[1] 49.40801
[1] 19.7632
[1] 49.40801
[1] 19.9279
[1] 49.40801
[1] 20.09259
[1] 49.40801
[1] 20.25728
[1] 49.40801
[1] 20.42198
[1] 49.40801
[1] 20.58667
[1] 49.40801
[1] 20.75136
[1] 49.40801
[1] 20.91606
[1] 49.40801
[1] 21.08075
[1] 49.40801
[1] 21.24544
[1] 49.40801
[1] 21.41014
[1] 49.40801
[1] 21.57483
[1] 49.40801
[1] 21.73952
[1] 49.40801
[1] 21.90422
[1] 49.40801
[1] 22.06891
[1] 49.40801
[1] 22.2336
[1] 49.40801
[1] 22.3983
[1] 49.40801
[1] 22.56299
[1] 49.40801
[1] 22.72768
[1] 49.40801
[1] 22.89238
[1] 49.40801
[1] 23.05707
[1] 49.40801
[1] 23.22176
[1] 49.40801
[1] 23.38646
[1] 49.40801
[1] 23.55115
[1] 49.40801
[1] 23.71584
[1] 49.40801
[1] 23.88054
[1] 49.40801
[1] 24.04523
[1] 49.40801
[1] 24.20992
[1] 49.40801
[1] 24.37462
[1] 49.40801
[1] 24.53931
[1] 49.40801
[1] 24.704
[1] 49.40801
[1] 24.8687
[1] 49.40801
[1] 25.03339
[1] 49.40801
[1] 25.19808
[1] 49.40801
[1] 25.36278
[1] 49.40801
[1] 25.52747
[1] 49.40801
[1] 25.69216
[1] 49.40801
[1] 25.85686
[1] 49.40801
[1] 26.02155
[1] 49.40801
[1] 26.18624
[1] 49.40801
[1] 26.35094
[1] 49.40801
[1] 26.51563
[1] 49.40801
[1] 26.68032
[1] 49.40801
[1] 26.84502
[1] 49.40801
[1] 27.00971
[1] 49.40801
[1] 27.1744
[1] 49.40801
[1] 27.3391
[1] 49.40801
[1] 27.50379
[1] 49.40801
[1] 27.66848
[1] 49.40801
[1] 27.83318
[1] 49.40801
[1] 27.99787
[1] 49.40801
[1] 28.16256
[1] 49.40801
[1] 28.32726
[1] 49.40801
[1] 28.49195
[1] 49.40801
[1] 28.65664
[1] 49.40801
[1] 28.82134
[1] 49.40801
[1] 28.98603
[1] 49.40801
[1] 29.15072
[1] 49.40801
[1] 29.31542
[1] 49.40801
[1] 29.48011
[1] 49.40801
[1] 29.6448
[1] 49.40801
[1] 29.8095
[1] 49.40801
[1] 29.97419
[1] 49.40801
[1] 30.13889
[1] 49.40801
[1] 30.30358
[1] 49.40801
[1] 30.46827
[1] 49.40801
[1] 30.63297
[1] 49.40801
[1] 30.79766
[1] 49.40801
[1] 30.96235
[1] 49.40801
[1] 31.12705
[1] 49.40801
[1] 31.29174
[1] 49.40801
[1] 31.45643
[1] 49.40801
[1] 31.62113
[1] 49.40801
[1] 31.78582
[1] 49.40801
[1] 31.95051
[1] 49.40801
[1] 32.11521
[1] 49.40801
[1] 32.2799
[1] 49.40801
[1] 32.44459
[1] 49.40801
[1] 32.60929
[1] 49.40801
[1] 32.77398
[1] 49.40801
[1] 32.93867
[1] 49.40801
[1] 33.10337
[1] 49.40801
[1] 33.26806
[1] 49.40801
[1] 33.43275
[1] 49.40801
[1] 33.59745
[1] 49.40801
[1] 33.76214
[1] 49.40801
[1] 33.92683
[1] 49.40801
[1] 34.09153
[1] 49.40801
[1] 34.25622
[1] 49.40801
[1] 34.42091
[1] 49.40801
[1] 34.58561
[1] 49.40801
[1] 34.7503
[1] 49.40801
[1] 34.91499
[1] 49.40801
[1] 35.07969
[1] 49.40801
[1] 35.24438
[1] 49.40801
[1] 35.40907
[1] 49.40801
[1] 35.57377
[1] 49.40801
[1] 35.73846
[1] 49.40801
[1] 35.90315
[1] 49.40801
[1] 36.06785
[1] 49.40801
[1] 36.23254
[1] 49.40801
[1] 36.39723
[1] 49.40801
[1] 36.56193
[1] 49.40801
[1] 36.72662
[1] 49.40801
[1] 36.89131
[1] 49.40801
[1] 37.05601
[1] 49.40801
[1] 37.2207
[1] 49.40801
[1] 37.38539
[1] 49.40801
[1] 37.55009
[1] 49.40801
[1] 37.71478
[1] 49.40801
[1] 37.87947
[1] 49.40801
[1] 38.04417
[1] 49.40801
[1] 38.20886
[1] 49.40801
[1] 38.37355
[1] 49.40801
[1] 38.53825
[1] 49.40801
[1] 38.70294
[1] 49.40801
[1] 38.86763
[1] 49.40801
[1] 39.03233
[1] 49.40801
[1] 39.19702
[1] 49.40801
[1] 39.36171
[1] 49.40801
[1] 39.52641
[1] 49.40801
[1] 39.6911
[1] 49.40801
[1] 39.85579
[1] 49.40801
[1] 40.02049
[1] 49.40801
[1] 40.18518
[1] 49.40801
[1] 40.34987
[1] 49.40801
[1] 40.51457
[1] 49.40801
[1] 40.67926
[1] 49.40801
[1] 40.84395
[1] 49.40801
[1] 41.00865
[1] 49.40801
[1] 41.17334
[1] 49.40801
[1] 41.33803
[1] 49.40801
[1] 41.50273
[1] 49.40801
[1] 41.66742
[1] 49.40801
[1] 41.83211
[1] 49.40801
[1] 41.99681
[1] 49.40801
[1] 42.1615
[1] 49.40801
[1] 42.32619
[1] 49.40801
[1] 42.49089
[1] 49.40801
[1] 42.65558
[1] 49.40801
[1] 42.82027
[1] 49.40801
[1] 42.98497
[1] 49.40801
[1] 43.14966
[1] 49.40801
[1] 43.31435
[1] 49.40801
[1] 43.47905
[1] 49.40801
[1] 43.64374
[1] 49.40801
[1] 43.80843
[1] 49.40801
[1] 43.97313
[1] 49.40801
[1] 44.13782
[1] 49.40801
[1] 44.30251
[1] 49.40801
[1] 44.46721
[1] 49.40801
[1] 44.6319
[1] 49.40801
[1] 44.79659
[1] 49.40801
[1] 44.96129
[1] 49.40801
[1] 45.12598
[1] 49.40801
[1] 45.29067
[1] 49.40801
[1] 45.45537
[1] 49.40801
[1] 45.62006
[1] 49.40801
[1] 45.78475
[1] 49.40801
[1] 45.94945
[1] 49.40801
[1] 46.11414
[1] 49.40801
[1] 46.27883
[1] 49.40801
[1] 46.44353
[1] 49.40801
[1] 46.60822
[1] 49.40801
[1] 46.77291
[1] 49.40801
[1] 46.93761
[1] 49.40801
[1] 47.1023
[1] 49.40801
[1] 47.26699
[1] 49.40801
[1] 47.43169
[1] 49.40801
[1] 47.59638
[1] 49.40801
[1] 47.76107
[1] 49.40801
[1] 47.92577
[1] 49.40801
[1] 48.09046
[1] 49.40801
[1] 48.25515
[1] 49.40801
[1] 48.41985
[1] 49.40801
[1] 48.58454
[1] 49.40801
[1] 48.74923
[1] 49.40801
[1] 48.91393
[1] 49.40801
[1] 49.07862
[1] 49.40801
[1] 49.24331
[1] 49.40801
[1] 49.40801
[1] 49.40801
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:10) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 10 * sizeminburnin
> rnot <- array(1:array_size, dim=c(10,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:10) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:10) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 3 rows containing missing values (geom_path). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning message:
Removed 2 rows containing missing values (geom_path). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  5.945   0.089   6.074 
