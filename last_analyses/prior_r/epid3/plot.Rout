
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=473, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=619, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=606, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2595728
[1] 77.87185
[1] 0.5191457
[1] 77.87185
[1] 0.7787185
[1] 77.87185
[1] 1.038291
[1] 77.87185
[1] 1.297864
[1] 77.87185
[1] 1.557437
[1] 77.87185
[1] 1.81701
[1] 77.87185
[1] 2.076583
[1] 77.87185
[1] 2.336156
[1] 77.87185
[1] 2.595728
[1] 77.87185
[1] 2.855301
[1] 77.87185
[1] 3.114874
[1] 77.87185
[1] 3.374447
[1] 77.87185
[1] 3.63402
[1] 77.87185
[1] 3.893593
[1] 77.87185
[1] 4.153165
[1] 77.87185
[1] 4.412738
[1] 77.87185
[1] 4.672311
[1] 77.87185
[1] 4.931884
[1] 77.87185
[1] 5.191457
[1] 77.87185
[1] 5.45103
[1] 77.87185
[1] 5.710602
[1] 77.87185
[1] 5.970175
[1] 77.87185
[1] 6.229748
[1] 77.87185
[1] 6.489321
[1] 77.87185
[1] 6.748894
[1] 77.87185
[1] 7.008467
[1] 77.87185
[1] 7.26804
[1] 77.87185
[1] 7.527612
[1] 77.87185
[1] 7.787185
[1] 77.87185
[1] 8.046758
[1] 77.87185
[1] 8.306331
[1] 77.87185
[1] 8.565904
[1] 77.87185
[1] 8.825477
[1] 77.87185
[1] 9.085049
[1] 77.87185
[1] 9.344622
[1] 77.87185
[1] 9.604195
[1] 77.87185
[1] 9.863768
[1] 77.87185
[1] 10.12334
[1] 77.87185
[1] 10.38291
[1] 77.87185
[1] 10.64249
[1] 77.87185
[1] 10.90206
[1] 77.87185
[1] 11.16163
[1] 77.87185
[1] 11.4212
[1] 77.87185
[1] 11.68078
[1] 77.87185
[1] 11.94035
[1] 77.87185
[1] 12.19992
[1] 77.87185
[1] 12.4595
[1] 77.87185
[1] 12.71907
[1] 77.87185
[1] 12.97864
[1] 77.87185
[1] 13.23821
[1] 77.87185
[1] 13.49779
[1] 77.87185
[1] 13.75736
[1] 77.87185
[1] 14.01693
[1] 77.87185
[1] 14.27651
[1] 77.87185
[1] 14.53608
[1] 77.87185
[1] 14.79565
[1] 77.87185
[1] 15.05522
[1] 77.87185
[1] 15.3148
[1] 77.87185
[1] 15.57437
[1] 77.87185
[1] 15.83394
[1] 77.87185
[1] 16.09352
[1] 77.87185
[1] 16.35309
[1] 77.87185
[1] 16.61266
[1] 77.87185
[1] 16.87223
[1] 77.87185
[1] 17.13181
[1] 77.87185
[1] 17.39138
[1] 77.87185
[1] 17.65095
[1] 77.87185
[1] 17.91053
[1] 77.87185
[1] 18.1701
[1] 77.87185
[1] 18.42967
[1] 77.87185
[1] 18.68924
[1] 77.87185
[1] 18.94882
[1] 77.87185
[1] 19.20839
[1] 77.87185
[1] 19.46796
[1] 77.87185
[1] 19.72754
[1] 77.87185
[1] 19.98711
[1] 77.87185
[1] 20.24668
[1] 77.87185
[1] 20.50625
[1] 77.87185
[1] 20.76583
[1] 77.87185
[1] 21.0254
[1] 77.87185
[1] 21.28497
[1] 77.87185
[1] 21.54455
[1] 77.87185
[1] 21.80412
[1] 77.87185
[1] 22.06369
[1] 77.87185
[1] 22.32326
[1] 77.87185
[1] 22.58284
[1] 77.87185
[1] 22.84241
[1] 77.87185
[1] 23.10198
[1] 77.87185
[1] 23.36156
[1] 77.87185
[1] 23.62113
[1] 77.87185
[1] 23.8807
[1] 77.87185
[1] 24.14027
[1] 77.87185
[1] 24.39985
[1] 77.87185
[1] 24.65942
[1] 77.87185
[1] 24.91899
[1] 77.87185
[1] 25.17857
[1] 77.87185
[1] 25.43814
[1] 77.87185
[1] 25.69771
[1] 77.87185
[1] 25.95728
[1] 77.87185
[1] 26.21686
[1] 77.87185
[1] 26.47643
[1] 77.87185
[1] 26.736
[1] 77.87185
[1] 26.99558
[1] 77.87185
[1] 27.25515
[1] 77.87185
[1] 27.51472
[1] 77.87185
[1] 27.77429
[1] 77.87185
[1] 28.03387
[1] 77.87185
[1] 28.29344
[1] 77.87185
[1] 28.55301
[1] 77.87185
[1] 28.81259
[1] 77.87185
[1] 29.07216
[1] 77.87185
[1] 29.33173
[1] 77.87185
[1] 29.5913
[1] 77.87185
[1] 29.85088
[1] 77.87185
[1] 30.11045
[1] 77.87185
[1] 30.37002
[1] 77.87185
[1] 30.6296
[1] 77.87185
[1] 30.88917
[1] 77.87185
[1] 31.14874
[1] 77.87185
[1] 31.40831
[1] 77.87185
[1] 31.66789
[1] 77.87185
[1] 31.92746
[1] 77.87185
[1] 32.18703
[1] 77.87185
[1] 32.44661
[1] 77.87185
[1] 32.70618
[1] 77.87185
[1] 32.96575
[1] 77.87185
[1] 33.22532
[1] 77.87185
[1] 33.4849
[1] 77.87185
[1] 33.74447
[1] 77.87185
[1] 34.00404
[1] 77.87185
[1] 34.26361
[1] 77.87185
[1] 34.52319
[1] 77.87185
[1] 34.78276
[1] 77.87185
[1] 35.04233
[1] 77.87185
[1] 35.30191
[1] 77.87185
[1] 35.56148
[1] 77.87185
[1] 35.82105
[1] 77.87185
[1] 36.08062
[1] 77.87185
[1] 36.3402
[1] 77.87185
[1] 36.59977
[1] 77.87185
[1] 36.85934
[1] 77.87185
[1] 37.11892
[1] 77.87185
[1] 37.37849
[1] 77.87185
[1] 37.63806
[1] 77.87185
[1] 37.89763
[1] 77.87185
[1] 38.15721
[1] 77.87185
[1] 38.41678
[1] 77.87185
[1] 38.67635
[1] 77.87185
[1] 38.93593
[1] 77.87185
[1] 39.1955
[1] 77.87185
[1] 39.45507
[1] 77.87185
[1] 39.71464
[1] 77.87185
[1] 39.97422
[1] 77.87185
[1] 40.23379
[1] 77.87185
[1] 40.49336
[1] 77.87185
[1] 40.75294
[1] 77.87185
[1] 41.01251
[1] 77.87185
[1] 41.27208
[1] 77.87185
[1] 41.53165
[1] 77.87185
[1] 41.79123
[1] 77.87185
[1] 42.0508
[1] 77.87185
[1] 42.31037
[1] 77.87185
[1] 42.56995
[1] 77.87185
[1] 42.82952
[1] 77.87185
[1] 43.08909
[1] 77.87185
[1] 43.34866
[1] 77.87185
[1] 43.60824
[1] 77.87185
[1] 43.86781
[1] 77.87185
[1] 44.12738
[1] 77.87185
[1] 44.38696
[1] 77.87185
[1] 44.64653
[1] 77.87185
[1] 44.9061
[1] 77.87185
[1] 45.16567
[1] 77.87185
[1] 45.42525
[1] 77.87185
[1] 45.68482
[1] 77.87185
[1] 45.94439
[1] 77.87185
[1] 46.20397
[1] 77.87185
[1] 46.46354
[1] 77.87185
[1] 46.72311
[1] 77.87185
[1] 46.98268
[1] 77.87185
[1] 47.24226
[1] 77.87185
[1] 47.50183
[1] 77.87185
[1] 47.7614
[1] 77.87185
[1] 48.02098
[1] 77.87185
[1] 48.28055
[1] 77.87185
[1] 48.54012
[1] 77.87185
[1] 48.79969
[1] 77.87185
[1] 49.05927
[1] 77.87185
[1] 49.31884
[1] 77.87185
[1] 49.57841
[1] 77.87185
[1] 49.83799
[1] 77.87185
[1] 50.09756
[1] 77.87185
[1] 50.35713
[1] 77.87185
[1] 50.6167
[1] 77.87185
[1] 50.87628
[1] 77.87185
[1] 51.13585
[1] 77.87185
[1] 51.39542
[1] 77.87185
[1] 51.655
[1] 77.87185
[1] 51.91457
[1] 77.87185
[1] 52.17414
[1] 77.87185
[1] 52.43371
[1] 77.87185
[1] 52.69329
[1] 77.87185
[1] 52.95286
[1] 77.87185
[1] 53.21243
[1] 77.87185
[1] 53.47201
[1] 77.87185
[1] 53.73158
[1] 77.87185
[1] 53.99115
[1] 77.87185
[1] 54.25072
[1] 77.87185
[1] 54.5103
[1] 77.87185
[1] 54.76987
[1] 77.87185
[1] 55.02944
[1] 77.87185
[1] 55.28901
[1] 77.87185
[1] 55.54859
[1] 77.87185
[1] 55.80816
[1] 77.87185
[1] 56.06773
[1] 77.87185
[1] 56.32731
[1] 77.87185
[1] 56.58688
[1] 77.87185
[1] 56.84645
[1] 77.87185
[1] 57.10602
[1] 77.87185
[1] 57.3656
[1] 77.87185
[1] 57.62517
[1] 77.87185
[1] 57.88474
[1] 77.87185
[1] 58.14432
[1] 77.87185
[1] 58.40389
[1] 77.87185
[1] 58.66346
[1] 77.87185
[1] 58.92303
[1] 77.87185
[1] 59.18261
[1] 77.87185
[1] 59.44218
[1] 77.87185
[1] 59.70175
[1] 77.87185
[1] 59.96133
[1] 77.87185
[1] 60.2209
[1] 77.87185
[1] 60.48047
[1] 77.87185
[1] 60.74004
[1] 77.87185
[1] 60.99962
[1] 77.87185
[1] 61.25919
[1] 77.87185
[1] 61.51876
[1] 77.87185
[1] 61.77834
[1] 77.87185
[1] 62.03791
[1] 77.87185
[1] 62.29748
[1] 77.87185
[1] 62.55705
[1] 77.87185
[1] 62.81663
[1] 77.87185
[1] 63.0762
[1] 77.87185
[1] 63.33577
[1] 77.87185
[1] 63.59535
[1] 77.87185
[1] 63.85492
[1] 77.87185
[1] 64.11449
[1] 77.87185
[1] 64.37406
[1] 77.87185
[1] 64.63364
[1] 77.87185
[1] 64.89321
[1] 77.87185
[1] 65.15278
[1] 77.87185
[1] 65.41236
[1] 77.87185
[1] 65.67193
[1] 77.87185
[1] 65.9315
[1] 77.87185
[1] 66.19107
[1] 77.87185
[1] 66.45065
[1] 77.87185
[1] 66.71022
[1] 77.87185
[1] 66.96979
[1] 77.87185
[1] 67.22937
[1] 77.87185
[1] 67.48894
[1] 77.87185
[1] 67.74851
[1] 77.87185
[1] 68.00808
[1] 77.87185
[1] 68.26766
[1] 77.87185
[1] 68.52723
[1] 77.87185
[1] 68.7868
[1] 77.87185
[1] 69.04638
[1] 77.87185
[1] 69.30595
[1] 77.87185
[1] 69.56552
[1] 77.87185
[1] 69.82509
[1] 77.87185
[1] 70.08467
[1] 77.87185
[1] 70.34424
[1] 77.87185
[1] 70.60381
[1] 77.87185
[1] 70.86339
[1] 77.87185
[1] 71.12296
[1] 77.87185
[1] 71.38253
[1] 77.87185
[1] 71.6421
[1] 77.87185
[1] 71.90168
[1] 77.87185
[1] 72.16125
[1] 77.87185
[1] 72.42082
[1] 77.87185
[1] 72.6804
[1] 77.87185
[1] 72.93997
[1] 77.87185
[1] 73.19954
[1] 77.87185
[1] 73.45911
[1] 77.87185
[1] 73.71869
[1] 77.87185
[1] 73.97826
[1] 77.87185
[1] 74.23783
[1] 77.87185
[1] 74.49741
[1] 77.87185
[1] 74.75698
[1] 77.87185
[1] 75.01655
[1] 77.87185
[1] 75.27612
[1] 77.87185
[1] 75.5357
[1] 77.87185
[1] 75.79527
[1] 77.87185
[1] 76.05484
[1] 77.87185
[1] 76.31442
[1] 77.87185
[1] 76.57399
[1] 77.87185
[1] 76.83356
[1] 77.87185
[1] 77.09313
[1] 77.87185
[1] 77.35271
[1] 77.87185
[1] 77.61228
[1] 77.87185
[1] 77.87185
[1] 77.87185
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  1.711   0.052   1.808 
