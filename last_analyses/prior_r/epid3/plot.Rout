
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=473, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=619, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=606, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2624763
[1] 78.7429
[1] 0.5249527
[1] 78.7429
[1] 0.787429
[1] 78.7429
[1] 1.049905
[1] 78.7429
[1] 1.312382
[1] 78.7429
[1] 1.574858
[1] 78.7429
[1] 1.837334
[1] 78.7429
[1] 2.099811
[1] 78.7429
[1] 2.362287
[1] 78.7429
[1] 2.624763
[1] 78.7429
[1] 2.88724
[1] 78.7429
[1] 3.149716
[1] 78.7429
[1] 3.412192
[1] 78.7429
[1] 3.674669
[1] 78.7429
[1] 3.937145
[1] 78.7429
[1] 4.199621
[1] 78.7429
[1] 4.462098
[1] 78.7429
[1] 4.724574
[1] 78.7429
[1] 4.98705
[1] 78.7429
[1] 5.249527
[1] 78.7429
[1] 5.512003
[1] 78.7429
[1] 5.774479
[1] 78.7429
[1] 6.036956
[1] 78.7429
[1] 6.299432
[1] 78.7429
[1] 6.561908
[1] 78.7429
[1] 6.824385
[1] 78.7429
[1] 7.086861
[1] 78.7429
[1] 7.349337
[1] 78.7429
[1] 7.611814
[1] 78.7429
[1] 7.87429
[1] 78.7429
[1] 8.136766
[1] 78.7429
[1] 8.399242
[1] 78.7429
[1] 8.661719
[1] 78.7429
[1] 8.924195
[1] 78.7429
[1] 9.186671
[1] 78.7429
[1] 9.449148
[1] 78.7429
[1] 9.711624
[1] 78.7429
[1] 9.9741
[1] 78.7429
[1] 10.23658
[1] 78.7429
[1] 10.49905
[1] 78.7429
[1] 10.76153
[1] 78.7429
[1] 11.02401
[1] 78.7429
[1] 11.28648
[1] 78.7429
[1] 11.54896
[1] 78.7429
[1] 11.81143
[1] 78.7429
[1] 12.07391
[1] 78.7429
[1] 12.33639
[1] 78.7429
[1] 12.59886
[1] 78.7429
[1] 12.86134
[1] 78.7429
[1] 13.12382
[1] 78.7429
[1] 13.38629
[1] 78.7429
[1] 13.64877
[1] 78.7429
[1] 13.91125
[1] 78.7429
[1] 14.17372
[1] 78.7429
[1] 14.4362
[1] 78.7429
[1] 14.69867
[1] 78.7429
[1] 14.96115
[1] 78.7429
[1] 15.22363
[1] 78.7429
[1] 15.4861
[1] 78.7429
[1] 15.74858
[1] 78.7429
[1] 16.01106
[1] 78.7429
[1] 16.27353
[1] 78.7429
[1] 16.53601
[1] 78.7429
[1] 16.79848
[1] 78.7429
[1] 17.06096
[1] 78.7429
[1] 17.32344
[1] 78.7429
[1] 17.58591
[1] 78.7429
[1] 17.84839
[1] 78.7429
[1] 18.11087
[1] 78.7429
[1] 18.37334
[1] 78.7429
[1] 18.63582
[1] 78.7429
[1] 18.8983
[1] 78.7429
[1] 19.16077
[1] 78.7429
[1] 19.42325
[1] 78.7429
[1] 19.68572
[1] 78.7429
[1] 19.9482
[1] 78.7429
[1] 20.21068
[1] 78.7429
[1] 20.47315
[1] 78.7429
[1] 20.73563
[1] 78.7429
[1] 20.99811
[1] 78.7429
[1] 21.26058
[1] 78.7429
[1] 21.52306
[1] 78.7429
[1] 21.78554
[1] 78.7429
[1] 22.04801
[1] 78.7429
[1] 22.31049
[1] 78.7429
[1] 22.57296
[1] 78.7429
[1] 22.83544
[1] 78.7429
[1] 23.09792
[1] 78.7429
[1] 23.36039
[1] 78.7429
[1] 23.62287
[1] 78.7429
[1] 23.88535
[1] 78.7429
[1] 24.14782
[1] 78.7429
[1] 24.4103
[1] 78.7429
[1] 24.67277
[1] 78.7429
[1] 24.93525
[1] 78.7429
[1] 25.19773
[1] 78.7429
[1] 25.4602
[1] 78.7429
[1] 25.72268
[1] 78.7429
[1] 25.98516
[1] 78.7429
[1] 26.24763
[1] 78.7429
[1] 26.51011
[1] 78.7429
[1] 26.77259
[1] 78.7429
[1] 27.03506
[1] 78.7429
[1] 27.29754
[1] 78.7429
[1] 27.56001
[1] 78.7429
[1] 27.82249
[1] 78.7429
[1] 28.08497
[1] 78.7429
[1] 28.34744
[1] 78.7429
[1] 28.60992
[1] 78.7429
[1] 28.8724
[1] 78.7429
[1] 29.13487
[1] 78.7429
[1] 29.39735
[1] 78.7429
[1] 29.65983
[1] 78.7429
[1] 29.9223
[1] 78.7429
[1] 30.18478
[1] 78.7429
[1] 30.44725
[1] 78.7429
[1] 30.70973
[1] 78.7429
[1] 30.97221
[1] 78.7429
[1] 31.23468
[1] 78.7429
[1] 31.49716
[1] 78.7429
[1] 31.75964
[1] 78.7429
[1] 32.02211
[1] 78.7429
[1] 32.28459
[1] 78.7429
[1] 32.54706
[1] 78.7429
[1] 32.80954
[1] 78.7429
[1] 33.07202
[1] 78.7429
[1] 33.33449
[1] 78.7429
[1] 33.59697
[1] 78.7429
[1] 33.85945
[1] 78.7429
[1] 34.12192
[1] 78.7429
[1] 34.3844
[1] 78.7429
[1] 34.64688
[1] 78.7429
[1] 34.90935
[1] 78.7429
[1] 35.17183
[1] 78.7429
[1] 35.4343
[1] 78.7429
[1] 35.69678
[1] 78.7429
[1] 35.95926
[1] 78.7429
[1] 36.22173
[1] 78.7429
[1] 36.48421
[1] 78.7429
[1] 36.74669
[1] 78.7429
[1] 37.00916
[1] 78.7429
[1] 37.27164
[1] 78.7429
[1] 37.53411
[1] 78.7429
[1] 37.79659
[1] 78.7429
[1] 38.05907
[1] 78.7429
[1] 38.32154
[1] 78.7429
[1] 38.58402
[1] 78.7429
[1] 38.8465
[1] 78.7429
[1] 39.10897
[1] 78.7429
[1] 39.37145
[1] 78.7429
[1] 39.63393
[1] 78.7429
[1] 39.8964
[1] 78.7429
[1] 40.15888
[1] 78.7429
[1] 40.42135
[1] 78.7429
[1] 40.68383
[1] 78.7429
[1] 40.94631
[1] 78.7429
[1] 41.20878
[1] 78.7429
[1] 41.47126
[1] 78.7429
[1] 41.73374
[1] 78.7429
[1] 41.99621
[1] 78.7429
[1] 42.25869
[1] 78.7429
[1] 42.52117
[1] 78.7429
[1] 42.78364
[1] 78.7429
[1] 43.04612
[1] 78.7429
[1] 43.30859
[1] 78.7429
[1] 43.57107
[1] 78.7429
[1] 43.83355
[1] 78.7429
[1] 44.09602
[1] 78.7429
[1] 44.3585
[1] 78.7429
[1] 44.62098
[1] 78.7429
[1] 44.88345
[1] 78.7429
[1] 45.14593
[1] 78.7429
[1] 45.4084
[1] 78.7429
[1] 45.67088
[1] 78.7429
[1] 45.93336
[1] 78.7429
[1] 46.19583
[1] 78.7429
[1] 46.45831
[1] 78.7429
[1] 46.72079
[1] 78.7429
[1] 46.98326
[1] 78.7429
[1] 47.24574
[1] 78.7429
[1] 47.50822
[1] 78.7429
[1] 47.77069
[1] 78.7429
[1] 48.03317
[1] 78.7429
[1] 48.29564
[1] 78.7429
[1] 48.55812
[1] 78.7429
[1] 48.8206
[1] 78.7429
[1] 49.08307
[1] 78.7429
[1] 49.34555
[1] 78.7429
[1] 49.60803
[1] 78.7429
[1] 49.8705
[1] 78.7429
[1] 50.13298
[1] 78.7429
[1] 50.39545
[1] 78.7429
[1] 50.65793
[1] 78.7429
[1] 50.92041
[1] 78.7429
[1] 51.18288
[1] 78.7429
[1] 51.44536
[1] 78.7429
[1] 51.70784
[1] 78.7429
[1] 51.97031
[1] 78.7429
[1] 52.23279
[1] 78.7429
[1] 52.49527
[1] 78.7429
[1] 52.75774
[1] 78.7429
[1] 53.02022
[1] 78.7429
[1] 53.28269
[1] 78.7429
[1] 53.54517
[1] 78.7429
[1] 53.80765
[1] 78.7429
[1] 54.07012
[1] 78.7429
[1] 54.3326
[1] 78.7429
[1] 54.59508
[1] 78.7429
[1] 54.85755
[1] 78.7429
[1] 55.12003
[1] 78.7429
[1] 55.38251
[1] 78.7429
[1] 55.64498
[1] 78.7429
[1] 55.90746
[1] 78.7429
[1] 56.16993
[1] 78.7429
[1] 56.43241
[1] 78.7429
[1] 56.69489
[1] 78.7429
[1] 56.95736
[1] 78.7429
[1] 57.21984
[1] 78.7429
[1] 57.48232
[1] 78.7429
[1] 57.74479
[1] 78.7429
[1] 58.00727
[1] 78.7429
[1] 58.26974
[1] 78.7429
[1] 58.53222
[1] 78.7429
[1] 58.7947
[1] 78.7429
[1] 59.05717
[1] 78.7429
[1] 59.31965
[1] 78.7429
[1] 59.58213
[1] 78.7429
[1] 59.8446
[1] 78.7429
[1] 60.10708
[1] 78.7429
[1] 60.36956
[1] 78.7429
[1] 60.63203
[1] 78.7429
[1] 60.89451
[1] 78.7429
[1] 61.15698
[1] 78.7429
[1] 61.41946
[1] 78.7429
[1] 61.68194
[1] 78.7429
[1] 61.94441
[1] 78.7429
[1] 62.20689
[1] 78.7429
[1] 62.46937
[1] 78.7429
[1] 62.73184
[1] 78.7429
[1] 62.99432
[1] 78.7429
[1] 63.2568
[1] 78.7429
[1] 63.51927
[1] 78.7429
[1] 63.78175
[1] 78.7429
[1] 64.04422
[1] 78.7429
[1] 64.3067
[1] 78.7429
[1] 64.56918
[1] 78.7429
[1] 64.83165
[1] 78.7429
[1] 65.09413
[1] 78.7429
[1] 65.35661
[1] 78.7429
[1] 65.61908
[1] 78.7429
[1] 65.88156
[1] 78.7429
[1] 66.14403
[1] 78.7429
[1] 66.40651
[1] 78.7429
[1] 66.66899
[1] 78.7429
[1] 66.93146
[1] 78.7429
[1] 67.19394
[1] 78.7429
[1] 67.45642
[1] 78.7429
[1] 67.71889
[1] 78.7429
[1] 67.98137
[1] 78.7429
[1] 68.24385
[1] 78.7429
[1] 68.50632
[1] 78.7429
[1] 68.7688
[1] 78.7429
[1] 69.03127
[1] 78.7429
[1] 69.29375
[1] 78.7429
[1] 69.55623
[1] 78.7429
[1] 69.8187
[1] 78.7429
[1] 70.08118
[1] 78.7429
[1] 70.34366
[1] 78.7429
[1] 70.60613
[1] 78.7429
[1] 70.86861
[1] 78.7429
[1] 71.13108
[1] 78.7429
[1] 71.39356
[1] 78.7429
[1] 71.65604
[1] 78.7429
[1] 71.91851
[1] 78.7429
[1] 72.18099
[1] 78.7429
[1] 72.44347
[1] 78.7429
[1] 72.70594
[1] 78.7429
[1] 72.96842
[1] 78.7429
[1] 73.2309
[1] 78.7429
[1] 73.49337
[1] 78.7429
[1] 73.75585
[1] 78.7429
[1] 74.01832
[1] 78.7429
[1] 74.2808
[1] 78.7429
[1] 74.54328
[1] 78.7429
[1] 74.80575
[1] 78.7429
[1] 75.06823
[1] 78.7429
[1] 75.33071
[1] 78.7429
[1] 75.59318
[1] 78.7429
[1] 75.85566
[1] 78.7429
[1] 76.11814
[1] 78.7429
[1] 76.38061
[1] 78.7429
[1] 76.64309
[1] 78.7429
[1] 76.90556
[1] 78.7429
[1] 77.16804
[1] 78.7429
[1] 77.43052
[1] 78.7429
[1] 77.69299
[1] 78.7429
[1] 77.95547
[1] 78.7429
[1] 78.21795
[1] 78.7429
[1] 78.48042
[1] 78.7429
[1] 78.7429
[1] 78.7429
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  9.160   0.263  12.580 
