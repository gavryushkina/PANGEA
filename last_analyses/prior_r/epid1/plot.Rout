
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=638, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=559, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=598, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1703673
[1] 51.11019
[1] 0.3407346
[1] 51.11019
[1] 0.5111019
[1] 51.11019
[1] 0.6814691
[1] 51.11019
[1] 0.8518364
[1] 51.11019
[1] 1.022204
[1] 51.11019
[1] 1.192571
[1] 51.11019
[1] 1.362938
[1] 51.11019
[1] 1.533306
[1] 51.11019
[1] 1.703673
[1] 51.11019
[1] 1.87404
[1] 51.11019
[1] 2.044407
[1] 51.11019
[1] 2.214775
[1] 51.11019
[1] 2.385142
[1] 51.11019
[1] 2.555509
[1] 51.11019
[1] 2.725877
[1] 51.11019
[1] 2.896244
[1] 51.11019
[1] 3.066611
[1] 51.11019
[1] 3.236978
[1] 51.11019
[1] 3.407346
[1] 51.11019
[1] 3.577713
[1] 51.11019
[1] 3.74808
[1] 51.11019
[1] 3.918448
[1] 51.11019
[1] 4.088815
[1] 51.11019
[1] 4.259182
[1] 51.11019
[1] 4.429549
[1] 51.11019
[1] 4.599917
[1] 51.11019
[1] 4.770284
[1] 51.11019
[1] 4.940651
[1] 51.11019
[1] 5.111019
[1] 51.11019
[1] 5.281386
[1] 51.11019
[1] 5.451753
[1] 51.11019
[1] 5.62212
[1] 51.11019
[1] 5.792488
[1] 51.11019
[1] 5.962855
[1] 51.11019
[1] 6.133222
[1] 51.11019
[1] 6.30359
[1] 51.11019
[1] 6.473957
[1] 51.11019
[1] 6.644324
[1] 51.11019
[1] 6.814691
[1] 51.11019
[1] 6.985059
[1] 51.11019
[1] 7.155426
[1] 51.11019
[1] 7.325793
[1] 51.11019
[1] 7.496161
[1] 51.11019
[1] 7.666528
[1] 51.11019
[1] 7.836895
[1] 51.11019
[1] 8.007262
[1] 51.11019
[1] 8.17763
[1] 51.11019
[1] 8.347997
[1] 51.11019
[1] 8.518364
[1] 51.11019
[1] 8.688732
[1] 51.11019
[1] 8.859099
[1] 51.11019
[1] 9.029466
[1] 51.11019
[1] 9.199833
[1] 51.11019
[1] 9.370201
[1] 51.11019
[1] 9.540568
[1] 51.11019
[1] 9.710935
[1] 51.11019
[1] 9.881303
[1] 51.11019
[1] 10.05167
[1] 51.11019
[1] 10.22204
[1] 51.11019
[1] 10.3924
[1] 51.11019
[1] 10.56277
[1] 51.11019
[1] 10.73314
[1] 51.11019
[1] 10.90351
[1] 51.11019
[1] 11.07387
[1] 51.11019
[1] 11.24424
[1] 51.11019
[1] 11.41461
[1] 51.11019
[1] 11.58498
[1] 51.11019
[1] 11.75534
[1] 51.11019
[1] 11.92571
[1] 51.11019
[1] 12.09608
[1] 51.11019
[1] 12.26644
[1] 51.11019
[1] 12.43681
[1] 51.11019
[1] 12.60718
[1] 51.11019
[1] 12.77755
[1] 51.11019
[1] 12.94791
[1] 51.11019
[1] 13.11828
[1] 51.11019
[1] 13.28865
[1] 51.11019
[1] 13.45902
[1] 51.11019
[1] 13.62938
[1] 51.11019
[1] 13.79975
[1] 51.11019
[1] 13.97012
[1] 51.11019
[1] 14.14048
[1] 51.11019
[1] 14.31085
[1] 51.11019
[1] 14.48122
[1] 51.11019
[1] 14.65159
[1] 51.11019
[1] 14.82195
[1] 51.11019
[1] 14.99232
[1] 51.11019
[1] 15.16269
[1] 51.11019
[1] 15.33306
[1] 51.11019
[1] 15.50342
[1] 51.11019
[1] 15.67379
[1] 51.11019
[1] 15.84416
[1] 51.11019
[1] 16.01452
[1] 51.11019
[1] 16.18489
[1] 51.11019
[1] 16.35526
[1] 51.11019
[1] 16.52563
[1] 51.11019
[1] 16.69599
[1] 51.11019
[1] 16.86636
[1] 51.11019
[1] 17.03673
[1] 51.11019
[1] 17.2071
[1] 51.11019
[1] 17.37746
[1] 51.11019
[1] 17.54783
[1] 51.11019
[1] 17.7182
[1] 51.11019
[1] 17.88857
[1] 51.11019
[1] 18.05893
[1] 51.11019
[1] 18.2293
[1] 51.11019
[1] 18.39967
[1] 51.11019
[1] 18.57003
[1] 51.11019
[1] 18.7404
[1] 51.11019
[1] 18.91077
[1] 51.11019
[1] 19.08114
[1] 51.11019
[1] 19.2515
[1] 51.11019
[1] 19.42187
[1] 51.11019
[1] 19.59224
[1] 51.11019
[1] 19.76261
[1] 51.11019
[1] 19.93297
[1] 51.11019
[1] 20.10334
[1] 51.11019
[1] 20.27371
[1] 51.11019
[1] 20.44407
[1] 51.11019
[1] 20.61444
[1] 51.11019
[1] 20.78481
[1] 51.11019
[1] 20.95518
[1] 51.11019
[1] 21.12554
[1] 51.11019
[1] 21.29591
[1] 51.11019
[1] 21.46628
[1] 51.11019
[1] 21.63665
[1] 51.11019
[1] 21.80701
[1] 51.11019
[1] 21.97738
[1] 51.11019
[1] 22.14775
[1] 51.11019
[1] 22.31811
[1] 51.11019
[1] 22.48848
[1] 51.11019
[1] 22.65885
[1] 51.11019
[1] 22.82922
[1] 51.11019
[1] 22.99958
[1] 51.11019
[1] 23.16995
[1] 51.11019
[1] 23.34032
[1] 51.11019
[1] 23.51069
[1] 51.11019
[1] 23.68105
[1] 51.11019
[1] 23.85142
[1] 51.11019
[1] 24.02179
[1] 51.11019
[1] 24.19215
[1] 51.11019
[1] 24.36252
[1] 51.11019
[1] 24.53289
[1] 51.11019
[1] 24.70326
[1] 51.11019
[1] 24.87362
[1] 51.11019
[1] 25.04399
[1] 51.11019
[1] 25.21436
[1] 51.11019
[1] 25.38473
[1] 51.11019
[1] 25.55509
[1] 51.11019
[1] 25.72546
[1] 51.11019
[1] 25.89583
[1] 51.11019
[1] 26.06619
[1] 51.11019
[1] 26.23656
[1] 51.11019
[1] 26.40693
[1] 51.11019
[1] 26.5773
[1] 51.11019
[1] 26.74766
[1] 51.11019
[1] 26.91803
[1] 51.11019
[1] 27.0884
[1] 51.11019
[1] 27.25877
[1] 51.11019
[1] 27.42913
[1] 51.11019
[1] 27.5995
[1] 51.11019
[1] 27.76987
[1] 51.11019
[1] 27.94023
[1] 51.11019
[1] 28.1106
[1] 51.11019
[1] 28.28097
[1] 51.11019
[1] 28.45134
[1] 51.11019
[1] 28.6217
[1] 51.11019
[1] 28.79207
[1] 51.11019
[1] 28.96244
[1] 51.11019
[1] 29.13281
[1] 51.11019
[1] 29.30317
[1] 51.11019
[1] 29.47354
[1] 51.11019
[1] 29.64391
[1] 51.11019
[1] 29.81428
[1] 51.11019
[1] 29.98464
[1] 51.11019
[1] 30.15501
[1] 51.11019
[1] 30.32538
[1] 51.11019
[1] 30.49574
[1] 51.11019
[1] 30.66611
[1] 51.11019
[1] 30.83648
[1] 51.11019
[1] 31.00685
[1] 51.11019
[1] 31.17721
[1] 51.11019
[1] 31.34758
[1] 51.11019
[1] 31.51795
[1] 51.11019
[1] 31.68832
[1] 51.11019
[1] 31.85868
[1] 51.11019
[1] 32.02905
[1] 51.11019
[1] 32.19942
[1] 51.11019
[1] 32.36978
[1] 51.11019
[1] 32.54015
[1] 51.11019
[1] 32.71052
[1] 51.11019
[1] 32.88089
[1] 51.11019
[1] 33.05125
[1] 51.11019
[1] 33.22162
[1] 51.11019
[1] 33.39199
[1] 51.11019
[1] 33.56236
[1] 51.11019
[1] 33.73272
[1] 51.11019
[1] 33.90309
[1] 51.11019
[1] 34.07346
[1] 51.11019
[1] 34.24382
[1] 51.11019
[1] 34.41419
[1] 51.11019
[1] 34.58456
[1] 51.11019
[1] 34.75493
[1] 51.11019
[1] 34.92529
[1] 51.11019
[1] 35.09566
[1] 51.11019
[1] 35.26603
[1] 51.11019
[1] 35.4364
[1] 51.11019
[1] 35.60676
[1] 51.11019
[1] 35.77713
[1] 51.11019
[1] 35.9475
[1] 51.11019
[1] 36.11786
[1] 51.11019
[1] 36.28823
[1] 51.11019
[1] 36.4586
[1] 51.11019
[1] 36.62897
[1] 51.11019
[1] 36.79933
[1] 51.11019
[1] 36.9697
[1] 51.11019
[1] 37.14007
[1] 51.11019
[1] 37.31044
[1] 51.11019
[1] 37.4808
[1] 51.11019
[1] 37.65117
[1] 51.11019
[1] 37.82154
[1] 51.11019
[1] 37.9919
[1] 51.11019
[1] 38.16227
[1] 51.11019
[1] 38.33264
[1] 51.11019
[1] 38.50301
[1] 51.11019
[1] 38.67337
[1] 51.11019
[1] 38.84374
[1] 51.11019
[1] 39.01411
[1] 51.11019
[1] 39.18448
[1] 51.11019
[1] 39.35484
[1] 51.11019
[1] 39.52521
[1] 51.11019
[1] 39.69558
[1] 51.11019
[1] 39.86594
[1] 51.11019
[1] 40.03631
[1] 51.11019
[1] 40.20668
[1] 51.11019
[1] 40.37705
[1] 51.11019
[1] 40.54741
[1] 51.11019
[1] 40.71778
[1] 51.11019
[1] 40.88815
[1] 51.11019
[1] 41.05852
[1] 51.11019
[1] 41.22888
[1] 51.11019
[1] 41.39925
[1] 51.11019
[1] 41.56962
[1] 51.11019
[1] 41.73999
[1] 51.11019
[1] 41.91035
[1] 51.11019
[1] 42.08072
[1] 51.11019
[1] 42.25109
[1] 51.11019
[1] 42.42145
[1] 51.11019
[1] 42.59182
[1] 51.11019
[1] 42.76219
[1] 51.11019
[1] 42.93256
[1] 51.11019
[1] 43.10292
[1] 51.11019
[1] 43.27329
[1] 51.11019
[1] 43.44366
[1] 51.11019
[1] 43.61403
[1] 51.11019
[1] 43.78439
[1] 51.11019
[1] 43.95476
[1] 51.11019
[1] 44.12513
[1] 51.11019
[1] 44.29549
[1] 51.11019
[1] 44.46586
[1] 51.11019
[1] 44.63623
[1] 51.11019
[1] 44.8066
[1] 51.11019
[1] 44.97696
[1] 51.11019
[1] 45.14733
[1] 51.11019
[1] 45.3177
[1] 51.11019
[1] 45.48807
[1] 51.11019
[1] 45.65843
[1] 51.11019
[1] 45.8288
[1] 51.11019
[1] 45.99917
[1] 51.11019
[1] 46.16953
[1] 51.11019
[1] 46.3399
[1] 51.11019
[1] 46.51027
[1] 51.11019
[1] 46.68064
[1] 51.11019
[1] 46.851
[1] 51.11019
[1] 47.02137
[1] 51.11019
[1] 47.19174
[1] 51.11019
[1] 47.36211
[1] 51.11019
[1] 47.53247
[1] 51.11019
[1] 47.70284
[1] 51.11019
[1] 47.87321
[1] 51.11019
[1] 48.04357
[1] 51.11019
[1] 48.21394
[1] 51.11019
[1] 48.38431
[1] 51.11019
[1] 48.55468
[1] 51.11019
[1] 48.72504
[1] 51.11019
[1] 48.89541
[1] 51.11019
[1] 49.06578
[1] 51.11019
[1] 49.23615
[1] 51.11019
[1] 49.40651
[1] 51.11019
[1] 49.57688
[1] 51.11019
[1] 49.74725
[1] 51.11019
[1] 49.91761
[1] 51.11019
[1] 50.08798
[1] 51.11019
[1] 50.25835
[1] 51.11019
[1] 50.42872
[1] 51.11019
[1] 50.59908
[1] 51.11019
[1] 50.76945
[1] 51.11019
[1] 50.93982
[1] 51.11019
[1] 51.11019
[1] 51.11019
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 89 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  9.272   0.228  13.137 
