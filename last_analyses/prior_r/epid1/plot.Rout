
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=638, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=559, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=598, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.1694672
[1] 50.84015
[1] 0.3389343
[1] 50.84015
[1] 0.5084015
[1] 50.84015
[1] 0.6778686
[1] 50.84015
[1] 0.8473358
[1] 50.84015
[1] 1.016803
[1] 50.84015
[1] 1.18627
[1] 50.84015
[1] 1.355737
[1] 50.84015
[1] 1.525204
[1] 50.84015
[1] 1.694672
[1] 50.84015
[1] 1.864139
[1] 50.84015
[1] 2.033606
[1] 50.84015
[1] 2.203073
[1] 50.84015
[1] 2.37254
[1] 50.84015
[1] 2.542007
[1] 50.84015
[1] 2.711474
[1] 50.84015
[1] 2.880942
[1] 50.84015
[1] 3.050409
[1] 50.84015
[1] 3.219876
[1] 50.84015
[1] 3.389343
[1] 50.84015
[1] 3.55881
[1] 50.84015
[1] 3.728277
[1] 50.84015
[1] 3.897745
[1] 50.84015
[1] 4.067212
[1] 50.84015
[1] 4.236679
[1] 50.84015
[1] 4.406146
[1] 50.84015
[1] 4.575613
[1] 50.84015
[1] 4.74508
[1] 50.84015
[1] 4.914547
[1] 50.84015
[1] 5.084015
[1] 50.84015
[1] 5.253482
[1] 50.84015
[1] 5.422949
[1] 50.84015
[1] 5.592416
[1] 50.84015
[1] 5.761883
[1] 50.84015
[1] 5.93135
[1] 50.84015
[1] 6.100818
[1] 50.84015
[1] 6.270285
[1] 50.84015
[1] 6.439752
[1] 50.84015
[1] 6.609219
[1] 50.84015
[1] 6.778686
[1] 50.84015
[1] 6.948153
[1] 50.84015
[1] 7.11762
[1] 50.84015
[1] 7.287088
[1] 50.84015
[1] 7.456555
[1] 50.84015
[1] 7.626022
[1] 50.84015
[1] 7.795489
[1] 50.84015
[1] 7.964956
[1] 50.84015
[1] 8.134423
[1] 50.84015
[1] 8.303891
[1] 50.84015
[1] 8.473358
[1] 50.84015
[1] 8.642825
[1] 50.84015
[1] 8.812292
[1] 50.84015
[1] 8.981759
[1] 50.84015
[1] 9.151226
[1] 50.84015
[1] 9.320693
[1] 50.84015
[1] 9.490161
[1] 50.84015
[1] 9.659628
[1] 50.84015
[1] 9.829095
[1] 50.84015
[1] 9.998562
[1] 50.84015
[1] 10.16803
[1] 50.84015
[1] 10.3375
[1] 50.84015
[1] 10.50696
[1] 50.84015
[1] 10.67643
[1] 50.84015
[1] 10.8459
[1] 50.84015
[1] 11.01536
[1] 50.84015
[1] 11.18483
[1] 50.84015
[1] 11.3543
[1] 50.84015
[1] 11.52377
[1] 50.84015
[1] 11.69323
[1] 50.84015
[1] 11.8627
[1] 50.84015
[1] 12.03217
[1] 50.84015
[1] 12.20164
[1] 50.84015
[1] 12.3711
[1] 50.84015
[1] 12.54057
[1] 50.84015
[1] 12.71004
[1] 50.84015
[1] 12.8795
[1] 50.84015
[1] 13.04897
[1] 50.84015
[1] 13.21844
[1] 50.84015
[1] 13.38791
[1] 50.84015
[1] 13.55737
[1] 50.84015
[1] 13.72684
[1] 50.84015
[1] 13.89631
[1] 50.84015
[1] 14.06577
[1] 50.84015
[1] 14.23524
[1] 50.84015
[1] 14.40471
[1] 50.84015
[1] 14.57418
[1] 50.84015
[1] 14.74364
[1] 50.84015
[1] 14.91311
[1] 50.84015
[1] 15.08258
[1] 50.84015
[1] 15.25204
[1] 50.84015
[1] 15.42151
[1] 50.84015
[1] 15.59098
[1] 50.84015
[1] 15.76045
[1] 50.84015
[1] 15.92991
[1] 50.84015
[1] 16.09938
[1] 50.84015
[1] 16.26885
[1] 50.84015
[1] 16.43831
[1] 50.84015
[1] 16.60778
[1] 50.84015
[1] 16.77725
[1] 50.84015
[1] 16.94672
[1] 50.84015
[1] 17.11618
[1] 50.84015
[1] 17.28565
[1] 50.84015
[1] 17.45512
[1] 50.84015
[1] 17.62458
[1] 50.84015
[1] 17.79405
[1] 50.84015
[1] 17.96352
[1] 50.84015
[1] 18.13299
[1] 50.84015
[1] 18.30245
[1] 50.84015
[1] 18.47192
[1] 50.84015
[1] 18.64139
[1] 50.84015
[1] 18.81085
[1] 50.84015
[1] 18.98032
[1] 50.84015
[1] 19.14979
[1] 50.84015
[1] 19.31926
[1] 50.84015
[1] 19.48872
[1] 50.84015
[1] 19.65819
[1] 50.84015
[1] 19.82766
[1] 50.84015
[1] 19.99712
[1] 50.84015
[1] 20.16659
[1] 50.84015
[1] 20.33606
[1] 50.84015
[1] 20.50553
[1] 50.84015
[1] 20.67499
[1] 50.84015
[1] 20.84446
[1] 50.84015
[1] 21.01393
[1] 50.84015
[1] 21.18339
[1] 50.84015
[1] 21.35286
[1] 50.84015
[1] 21.52233
[1] 50.84015
[1] 21.6918
[1] 50.84015
[1] 21.86126
[1] 50.84015
[1] 22.03073
[1] 50.84015
[1] 22.2002
[1] 50.84015
[1] 22.36966
[1] 50.84015
[1] 22.53913
[1] 50.84015
[1] 22.7086
[1] 50.84015
[1] 22.87807
[1] 50.84015
[1] 23.04753
[1] 50.84015
[1] 23.217
[1] 50.84015
[1] 23.38647
[1] 50.84015
[1] 23.55593
[1] 50.84015
[1] 23.7254
[1] 50.84015
[1] 23.89487
[1] 50.84015
[1] 24.06434
[1] 50.84015
[1] 24.2338
[1] 50.84015
[1] 24.40327
[1] 50.84015
[1] 24.57274
[1] 50.84015
[1] 24.7422
[1] 50.84015
[1] 24.91167
[1] 50.84015
[1] 25.08114
[1] 50.84015
[1] 25.25061
[1] 50.84015
[1] 25.42007
[1] 50.84015
[1] 25.58954
[1] 50.84015
[1] 25.75901
[1] 50.84015
[1] 25.92847
[1] 50.84015
[1] 26.09794
[1] 50.84015
[1] 26.26741
[1] 50.84015
[1] 26.43688
[1] 50.84015
[1] 26.60634
[1] 50.84015
[1] 26.77581
[1] 50.84015
[1] 26.94528
[1] 50.84015
[1] 27.11474
[1] 50.84015
[1] 27.28421
[1] 50.84015
[1] 27.45368
[1] 50.84015
[1] 27.62315
[1] 50.84015
[1] 27.79261
[1] 50.84015
[1] 27.96208
[1] 50.84015
[1] 28.13155
[1] 50.84015
[1] 28.30101
[1] 50.84015
[1] 28.47048
[1] 50.84015
[1] 28.63995
[1] 50.84015
[1] 28.80942
[1] 50.84015
[1] 28.97888
[1] 50.84015
[1] 29.14835
[1] 50.84015
[1] 29.31782
[1] 50.84015
[1] 29.48728
[1] 50.84015
[1] 29.65675
[1] 50.84015
[1] 29.82622
[1] 50.84015
[1] 29.99569
[1] 50.84015
[1] 30.16515
[1] 50.84015
[1] 30.33462
[1] 50.84015
[1] 30.50409
[1] 50.84015
[1] 30.67355
[1] 50.84015
[1] 30.84302
[1] 50.84015
[1] 31.01249
[1] 50.84015
[1] 31.18196
[1] 50.84015
[1] 31.35142
[1] 50.84015
[1] 31.52089
[1] 50.84015
[1] 31.69036
[1] 50.84015
[1] 31.85982
[1] 50.84015
[1] 32.02929
[1] 50.84015
[1] 32.19876
[1] 50.84015
[1] 32.36823
[1] 50.84015
[1] 32.53769
[1] 50.84015
[1] 32.70716
[1] 50.84015
[1] 32.87663
[1] 50.84015
[1] 33.04609
[1] 50.84015
[1] 33.21556
[1] 50.84015
[1] 33.38503
[1] 50.84015
[1] 33.5545
[1] 50.84015
[1] 33.72396
[1] 50.84015
[1] 33.89343
[1] 50.84015
[1] 34.0629
[1] 50.84015
[1] 34.23236
[1] 50.84015
[1] 34.40183
[1] 50.84015
[1] 34.5713
[1] 50.84015
[1] 34.74077
[1] 50.84015
[1] 34.91023
[1] 50.84015
[1] 35.0797
[1] 50.84015
[1] 35.24917
[1] 50.84015
[1] 35.41864
[1] 50.84015
[1] 35.5881
[1] 50.84015
[1] 35.75757
[1] 50.84015
[1] 35.92704
[1] 50.84015
[1] 36.0965
[1] 50.84015
[1] 36.26597
[1] 50.84015
[1] 36.43544
[1] 50.84015
[1] 36.60491
[1] 50.84015
[1] 36.77437
[1] 50.84015
[1] 36.94384
[1] 50.84015
[1] 37.11331
[1] 50.84015
[1] 37.28277
[1] 50.84015
[1] 37.45224
[1] 50.84015
[1] 37.62171
[1] 50.84015
[1] 37.79118
[1] 50.84015
[1] 37.96064
[1] 50.84015
[1] 38.13011
[1] 50.84015
[1] 38.29958
[1] 50.84015
[1] 38.46904
[1] 50.84015
[1] 38.63851
[1] 50.84015
[1] 38.80798
[1] 50.84015
[1] 38.97745
[1] 50.84015
[1] 39.14691
[1] 50.84015
[1] 39.31638
[1] 50.84015
[1] 39.48585
[1] 50.84015
[1] 39.65531
[1] 50.84015
[1] 39.82478
[1] 50.84015
[1] 39.99425
[1] 50.84015
[1] 40.16372
[1] 50.84015
[1] 40.33318
[1] 50.84015
[1] 40.50265
[1] 50.84015
[1] 40.67212
[1] 50.84015
[1] 40.84158
[1] 50.84015
[1] 41.01105
[1] 50.84015
[1] 41.18052
[1] 50.84015
[1] 41.34999
[1] 50.84015
[1] 41.51945
[1] 50.84015
[1] 41.68892
[1] 50.84015
[1] 41.85839
[1] 50.84015
[1] 42.02785
[1] 50.84015
[1] 42.19732
[1] 50.84015
[1] 42.36679
[1] 50.84015
[1] 42.53626
[1] 50.84015
[1] 42.70572
[1] 50.84015
[1] 42.87519
[1] 50.84015
[1] 43.04466
[1] 50.84015
[1] 43.21412
[1] 50.84015
[1] 43.38359
[1] 50.84015
[1] 43.55306
[1] 50.84015
[1] 43.72253
[1] 50.84015
[1] 43.89199
[1] 50.84015
[1] 44.06146
[1] 50.84015
[1] 44.23093
[1] 50.84015
[1] 44.40039
[1] 50.84015
[1] 44.56986
[1] 50.84015
[1] 44.73933
[1] 50.84015
[1] 44.9088
[1] 50.84015
[1] 45.07826
[1] 50.84015
[1] 45.24773
[1] 50.84015
[1] 45.4172
[1] 50.84015
[1] 45.58666
[1] 50.84015
[1] 45.75613
[1] 50.84015
[1] 45.9256
[1] 50.84015
[1] 46.09507
[1] 50.84015
[1] 46.26453
[1] 50.84015
[1] 46.434
[1] 50.84015
[1] 46.60347
[1] 50.84015
[1] 46.77293
[1] 50.84015
[1] 46.9424
[1] 50.84015
[1] 47.11187
[1] 50.84015
[1] 47.28134
[1] 50.84015
[1] 47.4508
[1] 50.84015
[1] 47.62027
[1] 50.84015
[1] 47.78974
[1] 50.84015
[1] 47.9592
[1] 50.84015
[1] 48.12867
[1] 50.84015
[1] 48.29814
[1] 50.84015
[1] 48.46761
[1] 50.84015
[1] 48.63707
[1] 50.84015
[1] 48.80654
[1] 50.84015
[1] 48.97601
[1] 50.84015
[1] 49.14547
[1] 50.84015
[1] 49.31494
[1] 50.84015
[1] 49.48441
[1] 50.84015
[1] 49.65388
[1] 50.84015
[1] 49.82334
[1] 50.84015
[1] 49.99281
[1] 50.84015
[1] 50.16228
[1] 50.84015
[1] 50.33174
[1] 50.84015
[1] 50.50121
[1] 50.84015
[1] 50.67068
[1] 50.84015
[1] 50.84015
[1] 50.84015
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 89 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 2 rows containing missing values (geom_path). 
2: Removed 88 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  1.806   0.054   1.925 
