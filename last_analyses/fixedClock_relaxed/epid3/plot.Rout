
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=470, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=616, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=603, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2620274
[1] 78.60822
[1] 0.5240548
[1] 78.60822
[1] 0.7860822
[1] 78.60822
[1] 1.04811
[1] 78.60822
[1] 1.310137
[1] 78.60822
[1] 1.572164
[1] 78.60822
[1] 1.834192
[1] 78.60822
[1] 2.096219
[1] 78.60822
[1] 2.358247
[1] 78.60822
[1] 2.620274
[1] 78.60822
[1] 2.882301
[1] 78.60822
[1] 3.144329
[1] 78.60822
[1] 3.406356
[1] 78.60822
[1] 3.668384
[1] 78.60822
[1] 3.930411
[1] 78.60822
[1] 4.192438
[1] 78.60822
[1] 4.454466
[1] 78.60822
[1] 4.716493
[1] 78.60822
[1] 4.978521
[1] 78.60822
[1] 5.240548
[1] 78.60822
[1] 5.502575
[1] 78.60822
[1] 5.764603
[1] 78.60822
[1] 6.02663
[1] 78.60822
[1] 6.288658
[1] 78.60822
[1] 6.550685
[1] 78.60822
[1] 6.812712
[1] 78.60822
[1] 7.07474
[1] 78.60822
[1] 7.336767
[1] 78.60822
[1] 7.598795
[1] 78.60822
[1] 7.860822
[1] 78.60822
[1] 8.12285
[1] 78.60822
[1] 8.384877
[1] 78.60822
[1] 8.646904
[1] 78.60822
[1] 8.908932
[1] 78.60822
[1] 9.170959
[1] 78.60822
[1] 9.432987
[1] 78.60822
[1] 9.695014
[1] 78.60822
[1] 9.957041
[1] 78.60822
[1] 10.21907
[1] 78.60822
[1] 10.4811
[1] 78.60822
[1] 10.74312
[1] 78.60822
[1] 11.00515
[1] 78.60822
[1] 11.26718
[1] 78.60822
[1] 11.52921
[1] 78.60822
[1] 11.79123
[1] 78.60822
[1] 12.05326
[1] 78.60822
[1] 12.31529
[1] 78.60822
[1] 12.57732
[1] 78.60822
[1] 12.83934
[1] 78.60822
[1] 13.10137
[1] 78.60822
[1] 13.3634
[1] 78.60822
[1] 13.62542
[1] 78.60822
[1] 13.88745
[1] 78.60822
[1] 14.14948
[1] 78.60822
[1] 14.41151
[1] 78.60822
[1] 14.67353
[1] 78.60822
[1] 14.93556
[1] 78.60822
[1] 15.19759
[1] 78.60822
[1] 15.45962
[1] 78.60822
[1] 15.72164
[1] 78.60822
[1] 15.98367
[1] 78.60822
[1] 16.2457
[1] 78.60822
[1] 16.50773
[1] 78.60822
[1] 16.76975
[1] 78.60822
[1] 17.03178
[1] 78.60822
[1] 17.29381
[1] 78.60822
[1] 17.55584
[1] 78.60822
[1] 17.81786
[1] 78.60822
[1] 18.07989
[1] 78.60822
[1] 18.34192
[1] 78.60822
[1] 18.60395
[1] 78.60822
[1] 18.86597
[1] 78.60822
[1] 19.128
[1] 78.60822
[1] 19.39003
[1] 78.60822
[1] 19.65206
[1] 78.60822
[1] 19.91408
[1] 78.60822
[1] 20.17611
[1] 78.60822
[1] 20.43814
[1] 78.60822
[1] 20.70016
[1] 78.60822
[1] 20.96219
[1] 78.60822
[1] 21.22422
[1] 78.60822
[1] 21.48625
[1] 78.60822
[1] 21.74827
[1] 78.60822
[1] 22.0103
[1] 78.60822
[1] 22.27233
[1] 78.60822
[1] 22.53436
[1] 78.60822
[1] 22.79638
[1] 78.60822
[1] 23.05841
[1] 78.60822
[1] 23.32044
[1] 78.60822
[1] 23.58247
[1] 78.60822
[1] 23.84449
[1] 78.60822
[1] 24.10652
[1] 78.60822
[1] 24.36855
[1] 78.60822
[1] 24.63058
[1] 78.60822
[1] 24.8926
[1] 78.60822
[1] 25.15463
[1] 78.60822
[1] 25.41666
[1] 78.60822
[1] 25.67869
[1] 78.60822
[1] 25.94071
[1] 78.60822
[1] 26.20274
[1] 78.60822
[1] 26.46477
[1] 78.60822
[1] 26.7268
[1] 78.60822
[1] 26.98882
[1] 78.60822
[1] 27.25085
[1] 78.60822
[1] 27.51288
[1] 78.60822
[1] 27.7749
[1] 78.60822
[1] 28.03693
[1] 78.60822
[1] 28.29896
[1] 78.60822
[1] 28.56099
[1] 78.60822
[1] 28.82301
[1] 78.60822
[1] 29.08504
[1] 78.60822
[1] 29.34707
[1] 78.60822
[1] 29.6091
[1] 78.60822
[1] 29.87112
[1] 78.60822
[1] 30.13315
[1] 78.60822
[1] 30.39518
[1] 78.60822
[1] 30.65721
[1] 78.60822
[1] 30.91923
[1] 78.60822
[1] 31.18126
[1] 78.60822
[1] 31.44329
[1] 78.60822
[1] 31.70532
[1] 78.60822
[1] 31.96734
[1] 78.60822
[1] 32.22937
[1] 78.60822
[1] 32.4914
[1] 78.60822
[1] 32.75343
[1] 78.60822
[1] 33.01545
[1] 78.60822
[1] 33.27748
[1] 78.60822
[1] 33.53951
[1] 78.60822
[1] 33.80154
[1] 78.60822
[1] 34.06356
[1] 78.60822
[1] 34.32559
[1] 78.60822
[1] 34.58762
[1] 78.60822
[1] 34.84964
[1] 78.60822
[1] 35.11167
[1] 78.60822
[1] 35.3737
[1] 78.60822
[1] 35.63573
[1] 78.60822
[1] 35.89775
[1] 78.60822
[1] 36.15978
[1] 78.60822
[1] 36.42181
[1] 78.60822
[1] 36.68384
[1] 78.60822
[1] 36.94586
[1] 78.60822
[1] 37.20789
[1] 78.60822
[1] 37.46992
[1] 78.60822
[1] 37.73195
[1] 78.60822
[1] 37.99397
[1] 78.60822
[1] 38.256
[1] 78.60822
[1] 38.51803
[1] 78.60822
[1] 38.78006
[1] 78.60822
[1] 39.04208
[1] 78.60822
[1] 39.30411
[1] 78.60822
[1] 39.56614
[1] 78.60822
[1] 39.82817
[1] 78.60822
[1] 40.09019
[1] 78.60822
[1] 40.35222
[1] 78.60822
[1] 40.61425
[1] 78.60822
[1] 40.87627
[1] 78.60822
[1] 41.1383
[1] 78.60822
[1] 41.40033
[1] 78.60822
[1] 41.66236
[1] 78.60822
[1] 41.92438
[1] 78.60822
[1] 42.18641
[1] 78.60822
[1] 42.44844
[1] 78.60822
[1] 42.71047
[1] 78.60822
[1] 42.97249
[1] 78.60822
[1] 43.23452
[1] 78.60822
[1] 43.49655
[1] 78.60822
[1] 43.75858
[1] 78.60822
[1] 44.0206
[1] 78.60822
[1] 44.28263
[1] 78.60822
[1] 44.54466
[1] 78.60822
[1] 44.80669
[1] 78.60822
[1] 45.06871
[1] 78.60822
[1] 45.33074
[1] 78.60822
[1] 45.59277
[1] 78.60822
[1] 45.8548
[1] 78.60822
[1] 46.11682
[1] 78.60822
[1] 46.37885
[1] 78.60822
[1] 46.64088
[1] 78.60822
[1] 46.90291
[1] 78.60822
[1] 47.16493
[1] 78.60822
[1] 47.42696
[1] 78.60822
[1] 47.68899
[1] 78.60822
[1] 47.95101
[1] 78.60822
[1] 48.21304
[1] 78.60822
[1] 48.47507
[1] 78.60822
[1] 48.7371
[1] 78.60822
[1] 48.99912
[1] 78.60822
[1] 49.26115
[1] 78.60822
[1] 49.52318
[1] 78.60822
[1] 49.78521
[1] 78.60822
[1] 50.04723
[1] 78.60822
[1] 50.30926
[1] 78.60822
[1] 50.57129
[1] 78.60822
[1] 50.83332
[1] 78.60822
[1] 51.09534
[1] 78.60822
[1] 51.35737
[1] 78.60822
[1] 51.6194
[1] 78.60822
[1] 51.88143
[1] 78.60822
[1] 52.14345
[1] 78.60822
[1] 52.40548
[1] 78.60822
[1] 52.66751
[1] 78.60822
[1] 52.92954
[1] 78.60822
[1] 53.19156
[1] 78.60822
[1] 53.45359
[1] 78.60822
[1] 53.71562
[1] 78.60822
[1] 53.97765
[1] 78.60822
[1] 54.23967
[1] 78.60822
[1] 54.5017
[1] 78.60822
[1] 54.76373
[1] 78.60822
[1] 55.02575
[1] 78.60822
[1] 55.28778
[1] 78.60822
[1] 55.54981
[1] 78.60822
[1] 55.81184
[1] 78.60822
[1] 56.07386
[1] 78.60822
[1] 56.33589
[1] 78.60822
[1] 56.59792
[1] 78.60822
[1] 56.85995
[1] 78.60822
[1] 57.12197
[1] 78.60822
[1] 57.384
[1] 78.60822
[1] 57.64603
[1] 78.60822
[1] 57.90806
[1] 78.60822
[1] 58.17008
[1] 78.60822
[1] 58.43211
[1] 78.60822
[1] 58.69414
[1] 78.60822
[1] 58.95617
[1] 78.60822
[1] 59.21819
[1] 78.60822
[1] 59.48022
[1] 78.60822
[1] 59.74225
[1] 78.60822
[1] 60.00428
[1] 78.60822
[1] 60.2663
[1] 78.60822
[1] 60.52833
[1] 78.60822
[1] 60.79036
[1] 78.60822
[1] 61.05239
[1] 78.60822
[1] 61.31441
[1] 78.60822
[1] 61.57644
[1] 78.60822
[1] 61.83847
[1] 78.60822
[1] 62.10049
[1] 78.60822
[1] 62.36252
[1] 78.60822
[1] 62.62455
[1] 78.60822
[1] 62.88658
[1] 78.60822
[1] 63.1486
[1] 78.60822
[1] 63.41063
[1] 78.60822
[1] 63.67266
[1] 78.60822
[1] 63.93469
[1] 78.60822
[1] 64.19671
[1] 78.60822
[1] 64.45874
[1] 78.60822
[1] 64.72077
[1] 78.60822
[1] 64.9828
[1] 78.60822
[1] 65.24482
[1] 78.60822
[1] 65.50685
[1] 78.60822
[1] 65.76888
[1] 78.60822
[1] 66.03091
[1] 78.60822
[1] 66.29293
[1] 78.60822
[1] 66.55496
[1] 78.60822
[1] 66.81699
[1] 78.60822
[1] 67.07902
[1] 78.60822
[1] 67.34104
[1] 78.60822
[1] 67.60307
[1] 78.60822
[1] 67.8651
[1] 78.60822
[1] 68.12712
[1] 78.60822
[1] 68.38915
[1] 78.60822
[1] 68.65118
[1] 78.60822
[1] 68.91321
[1] 78.60822
[1] 69.17523
[1] 78.60822
[1] 69.43726
[1] 78.60822
[1] 69.69929
[1] 78.60822
[1] 69.96132
[1] 78.60822
[1] 70.22334
[1] 78.60822
[1] 70.48537
[1] 78.60822
[1] 70.7474
[1] 78.60822
[1] 71.00943
[1] 78.60822
[1] 71.27145
[1] 78.60822
[1] 71.53348
[1] 78.60822
[1] 71.79551
[1] 78.60822
[1] 72.05754
[1] 78.60822
[1] 72.31956
[1] 78.60822
[1] 72.58159
[1] 78.60822
[1] 72.84362
[1] 78.60822
[1] 73.10565
[1] 78.60822
[1] 73.36767
[1] 78.60822
[1] 73.6297
[1] 78.60822
[1] 73.89173
[1] 78.60822
[1] 74.15376
[1] 78.60822
[1] 74.41578
[1] 78.60822
[1] 74.67781
[1] 78.60822
[1] 74.93984
[1] 78.60822
[1] 75.20186
[1] 78.60822
[1] 75.46389
[1] 78.60822
[1] 75.72592
[1] 78.60822
[1] 75.98795
[1] 78.60822
[1] 76.24997
[1] 78.60822
[1] 76.512
[1] 78.60822
[1] 76.77403
[1] 78.60822
[1] 77.03606
[1] 78.60822
[1] 77.29808
[1] 78.60822
[1] 77.56011
[1] 78.60822
[1] 77.82214
[1] 78.60822
[1] 78.08417
[1] 78.60822
[1] 78.34619
[1] 78.60822
[1] 78.60822
[1] 78.60822
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 13.200   0.686  27.441 
