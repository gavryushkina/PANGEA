
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=635, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=556, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=595, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2496659
[1] 74.89978
[1] 0.4993319
[1] 74.89978
[1] 0.7489978
[1] 74.89978
[1] 0.9986638
[1] 74.89978
[1] 1.24833
[1] 74.89978
[1] 1.497996
[1] 74.89978
[1] 1.747662
[1] 74.89978
[1] 1.997328
[1] 74.89978
[1] 2.246994
[1] 74.89978
[1] 2.496659
[1] 74.89978
[1] 2.746325
[1] 74.89978
[1] 2.995991
[1] 74.89978
[1] 3.245657
[1] 74.89978
[1] 3.495323
[1] 74.89978
[1] 3.744989
[1] 74.89978
[1] 3.994655
[1] 74.89978
[1] 4.244321
[1] 74.89978
[1] 4.493987
[1] 74.89978
[1] 4.743653
[1] 74.89978
[1] 4.993319
[1] 74.89978
[1] 5.242985
[1] 74.89978
[1] 5.492651
[1] 74.89978
[1] 5.742317
[1] 74.89978
[1] 5.991983
[1] 74.89978
[1] 6.241649
[1] 74.89978
[1] 6.491315
[1] 74.89978
[1] 6.740981
[1] 74.89978
[1] 6.990646
[1] 74.89978
[1] 7.240312
[1] 74.89978
[1] 7.489978
[1] 74.89978
[1] 7.739644
[1] 74.89978
[1] 7.98931
[1] 74.89978
[1] 8.238976
[1] 74.89978
[1] 8.488642
[1] 74.89978
[1] 8.738308
[1] 74.89978
[1] 8.987974
[1] 74.89978
[1] 9.23764
[1] 74.89978
[1] 9.487306
[1] 74.89978
[1] 9.736972
[1] 74.89978
[1] 9.986638
[1] 74.89978
[1] 10.2363
[1] 74.89978
[1] 10.48597
[1] 74.89978
[1] 10.73564
[1] 74.89978
[1] 10.9853
[1] 74.89978
[1] 11.23497
[1] 74.89978
[1] 11.48463
[1] 74.89978
[1] 11.7343
[1] 74.89978
[1] 11.98397
[1] 74.89978
[1] 12.23363
[1] 74.89978
[1] 12.4833
[1] 74.89978
[1] 12.73296
[1] 74.89978
[1] 12.98263
[1] 74.89978
[1] 13.2323
[1] 74.89978
[1] 13.48196
[1] 74.89978
[1] 13.73163
[1] 74.89978
[1] 13.98129
[1] 74.89978
[1] 14.23096
[1] 74.89978
[1] 14.48062
[1] 74.89978
[1] 14.73029
[1] 74.89978
[1] 14.97996
[1] 74.89978
[1] 15.22962
[1] 74.89978
[1] 15.47929
[1] 74.89978
[1] 15.72895
[1] 74.89978
[1] 15.97862
[1] 74.89978
[1] 16.22829
[1] 74.89978
[1] 16.47795
[1] 74.89978
[1] 16.72762
[1] 74.89978
[1] 16.97728
[1] 74.89978
[1] 17.22695
[1] 74.89978
[1] 17.47662
[1] 74.89978
[1] 17.72628
[1] 74.89978
[1] 17.97595
[1] 74.89978
[1] 18.22561
[1] 74.89978
[1] 18.47528
[1] 74.89978
[1] 18.72495
[1] 74.89978
[1] 18.97461
[1] 74.89978
[1] 19.22428
[1] 74.89978
[1] 19.47394
[1] 74.89978
[1] 19.72361
[1] 74.89978
[1] 19.97328
[1] 74.89978
[1] 20.22294
[1] 74.89978
[1] 20.47261
[1] 74.89978
[1] 20.72227
[1] 74.89978
[1] 20.97194
[1] 74.89978
[1] 21.22161
[1] 74.89978
[1] 21.47127
[1] 74.89978
[1] 21.72094
[1] 74.89978
[1] 21.9706
[1] 74.89978
[1] 22.22027
[1] 74.89978
[1] 22.46994
[1] 74.89978
[1] 22.7196
[1] 74.89978
[1] 22.96927
[1] 74.89978
[1] 23.21893
[1] 74.89978
[1] 23.4686
[1] 74.89978
[1] 23.71826
[1] 74.89978
[1] 23.96793
[1] 74.89978
[1] 24.2176
[1] 74.89978
[1] 24.46726
[1] 74.89978
[1] 24.71693
[1] 74.89978
[1] 24.96659
[1] 74.89978
[1] 25.21626
[1] 74.89978
[1] 25.46593
[1] 74.89978
[1] 25.71559
[1] 74.89978
[1] 25.96526
[1] 74.89978
[1] 26.21492
[1] 74.89978
[1] 26.46459
[1] 74.89978
[1] 26.71426
[1] 74.89978
[1] 26.96392
[1] 74.89978
[1] 27.21359
[1] 74.89978
[1] 27.46325
[1] 74.89978
[1] 27.71292
[1] 74.89978
[1] 27.96259
[1] 74.89978
[1] 28.21225
[1] 74.89978
[1] 28.46192
[1] 74.89978
[1] 28.71158
[1] 74.89978
[1] 28.96125
[1] 74.89978
[1] 29.21092
[1] 74.89978
[1] 29.46058
[1] 74.89978
[1] 29.71025
[1] 74.89978
[1] 29.95991
[1] 74.89978
[1] 30.20958
[1] 74.89978
[1] 30.45925
[1] 74.89978
[1] 30.70891
[1] 74.89978
[1] 30.95858
[1] 74.89978
[1] 31.20824
[1] 74.89978
[1] 31.45791
[1] 74.89978
[1] 31.70758
[1] 74.89978
[1] 31.95724
[1] 74.89978
[1] 32.20691
[1] 74.89978
[1] 32.45657
[1] 74.89978
[1] 32.70624
[1] 74.89978
[1] 32.9559
[1] 74.89978
[1] 33.20557
[1] 74.89978
[1] 33.45524
[1] 74.89978
[1] 33.7049
[1] 74.89978
[1] 33.95457
[1] 74.89978
[1] 34.20423
[1] 74.89978
[1] 34.4539
[1] 74.89978
[1] 34.70357
[1] 74.89978
[1] 34.95323
[1] 74.89978
[1] 35.2029
[1] 74.89978
[1] 35.45256
[1] 74.89978
[1] 35.70223
[1] 74.89978
[1] 35.9519
[1] 74.89978
[1] 36.20156
[1] 74.89978
[1] 36.45123
[1] 74.89978
[1] 36.70089
[1] 74.89978
[1] 36.95056
[1] 74.89978
[1] 37.20023
[1] 74.89978
[1] 37.44989
[1] 74.89978
[1] 37.69956
[1] 74.89978
[1] 37.94922
[1] 74.89978
[1] 38.19889
[1] 74.89978
[1] 38.44856
[1] 74.89978
[1] 38.69822
[1] 74.89978
[1] 38.94789
[1] 74.89978
[1] 39.19755
[1] 74.89978
[1] 39.44722
[1] 74.89978
[1] 39.69689
[1] 74.89978
[1] 39.94655
[1] 74.89978
[1] 40.19622
[1] 74.89978
[1] 40.44588
[1] 74.89978
[1] 40.69555
[1] 74.89978
[1] 40.94522
[1] 74.89978
[1] 41.19488
[1] 74.89978
[1] 41.44455
[1] 74.89978
[1] 41.69421
[1] 74.89978
[1] 41.94388
[1] 74.89978
[1] 42.19354
[1] 74.89978
[1] 42.44321
[1] 74.89978
[1] 42.69288
[1] 74.89978
[1] 42.94254
[1] 74.89978
[1] 43.19221
[1] 74.89978
[1] 43.44187
[1] 74.89978
[1] 43.69154
[1] 74.89978
[1] 43.94121
[1] 74.89978
[1] 44.19087
[1] 74.89978
[1] 44.44054
[1] 74.89978
[1] 44.6902
[1] 74.89978
[1] 44.93987
[1] 74.89978
[1] 45.18954
[1] 74.89978
[1] 45.4392
[1] 74.89978
[1] 45.68887
[1] 74.89978
[1] 45.93853
[1] 74.89978
[1] 46.1882
[1] 74.89978
[1] 46.43787
[1] 74.89978
[1] 46.68753
[1] 74.89978
[1] 46.9372
[1] 74.89978
[1] 47.18686
[1] 74.89978
[1] 47.43653
[1] 74.89978
[1] 47.6862
[1] 74.89978
[1] 47.93586
[1] 74.89978
[1] 48.18553
[1] 74.89978
[1] 48.43519
[1] 74.89978
[1] 48.68486
[1] 74.89978
[1] 48.93453
[1] 74.89978
[1] 49.18419
[1] 74.89978
[1] 49.43386
[1] 74.89978
[1] 49.68352
[1] 74.89978
[1] 49.93319
[1] 74.89978
[1] 50.18286
[1] 74.89978
[1] 50.43252
[1] 74.89978
[1] 50.68219
[1] 74.89978
[1] 50.93185
[1] 74.89978
[1] 51.18152
[1] 74.89978
[1] 51.43118
[1] 74.89978
[1] 51.68085
[1] 74.89978
[1] 51.93052
[1] 74.89978
[1] 52.18018
[1] 74.89978
[1] 52.42985
[1] 74.89978
[1] 52.67951
[1] 74.89978
[1] 52.92918
[1] 74.89978
[1] 53.17885
[1] 74.89978
[1] 53.42851
[1] 74.89978
[1] 53.67818
[1] 74.89978
[1] 53.92784
[1] 74.89978
[1] 54.17751
[1] 74.89978
[1] 54.42718
[1] 74.89978
[1] 54.67684
[1] 74.89978
[1] 54.92651
[1] 74.89978
[1] 55.17617
[1] 74.89978
[1] 55.42584
[1] 74.89978
[1] 55.67551
[1] 74.89978
[1] 55.92517
[1] 74.89978
[1] 56.17484
[1] 74.89978
[1] 56.4245
[1] 74.89978
[1] 56.67417
[1] 74.89978
[1] 56.92384
[1] 74.89978
[1] 57.1735
[1] 74.89978
[1] 57.42317
[1] 74.89978
[1] 57.67283
[1] 74.89978
[1] 57.9225
[1] 74.89978
[1] 58.17217
[1] 74.89978
[1] 58.42183
[1] 74.89978
[1] 58.6715
[1] 74.89978
[1] 58.92116
[1] 74.89978
[1] 59.17083
[1] 74.89978
[1] 59.4205
[1] 74.89978
[1] 59.67016
[1] 74.89978
[1] 59.91983
[1] 74.89978
[1] 60.16949
[1] 74.89978
[1] 60.41916
[1] 74.89978
[1] 60.66882
[1] 74.89978
[1] 60.91849
[1] 74.89978
[1] 61.16816
[1] 74.89978
[1] 61.41782
[1] 74.89978
[1] 61.66749
[1] 74.89978
[1] 61.91715
[1] 74.89978
[1] 62.16682
[1] 74.89978
[1] 62.41649
[1] 74.89978
[1] 62.66615
[1] 74.89978
[1] 62.91582
[1] 74.89978
[1] 63.16548
[1] 74.89978
[1] 63.41515
[1] 74.89978
[1] 63.66482
[1] 74.89978
[1] 63.91448
[1] 74.89978
[1] 64.16415
[1] 74.89978
[1] 64.41381
[1] 74.89978
[1] 64.66348
[1] 74.89978
[1] 64.91315
[1] 74.89978
[1] 65.16281
[1] 74.89978
[1] 65.41248
[1] 74.89978
[1] 65.66214
[1] 74.89978
[1] 65.91181
[1] 74.89978
[1] 66.16148
[1] 74.89978
[1] 66.41114
[1] 74.89978
[1] 66.66081
[1] 74.89978
[1] 66.91047
[1] 74.89978
[1] 67.16014
[1] 74.89978
[1] 67.40981
[1] 74.89978
[1] 67.65947
[1] 74.89978
[1] 67.90914
[1] 74.89978
[1] 68.1588
[1] 74.89978
[1] 68.40847
[1] 74.89978
[1] 68.65813
[1] 74.89978
[1] 68.9078
[1] 74.89978
[1] 69.15747
[1] 74.89978
[1] 69.40713
[1] 74.89978
[1] 69.6568
[1] 74.89978
[1] 69.90646
[1] 74.89978
[1] 70.15613
[1] 74.89978
[1] 70.4058
[1] 74.89978
[1] 70.65546
[1] 74.89978
[1] 70.90513
[1] 74.89978
[1] 71.15479
[1] 74.89978
[1] 71.40446
[1] 74.89978
[1] 71.65413
[1] 74.89978
[1] 71.90379
[1] 74.89978
[1] 72.15346
[1] 74.89978
[1] 72.40312
[1] 74.89978
[1] 72.65279
[1] 74.89978
[1] 72.90246
[1] 74.89978
[1] 73.15212
[1] 74.89978
[1] 73.40179
[1] 74.89978
[1] 73.65145
[1] 74.89978
[1] 73.90112
[1] 74.89978
[1] 74.15079
[1] 74.89978
[1] 74.40045
[1] 74.89978
[1] 74.65012
[1] 74.89978
[1] 74.89978
[1] 74.89978
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 1 sample A (stable)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 60 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 1 sample B (growing)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 60 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 1 sample C (declining)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 60 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
  4.341   0.079   4.501 
