
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scA_sample1_epi1.log', skip=624, header =T)
> table2 <- read.table('300914_Village_scB_sample1_epi1.log', skip=545, header =T)
> table3 <- read.table('300914_Village_scC_sample1_epi1.log', skip=584, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2481025
[1] 74.43074
[1] 0.496205
[1] 74.43074
[1] 0.7443074
[1] 74.43074
[1] 0.9924099
[1] 74.43074
[1] 1.240512
[1] 74.43074
[1] 1.488615
[1] 74.43074
[1] 1.736717
[1] 74.43074
[1] 1.98482
[1] 74.43074
[1] 2.232922
[1] 74.43074
[1] 2.481025
[1] 74.43074
[1] 2.729127
[1] 74.43074
[1] 2.97723
[1] 74.43074
[1] 3.225332
[1] 74.43074
[1] 3.473435
[1] 74.43074
[1] 3.721537
[1] 74.43074
[1] 3.96964
[1] 74.43074
[1] 4.217742
[1] 74.43074
[1] 4.465845
[1] 74.43074
[1] 4.713947
[1] 74.43074
[1] 4.96205
[1] 74.43074
[1] 5.210152
[1] 74.43074
[1] 5.458254
[1] 74.43074
[1] 5.706357
[1] 74.43074
[1] 5.954459
[1] 74.43074
[1] 6.202562
[1] 74.43074
[1] 6.450664
[1] 74.43074
[1] 6.698767
[1] 74.43074
[1] 6.946869
[1] 74.43074
[1] 7.194972
[1] 74.43074
[1] 7.443074
[1] 74.43074
[1] 7.691177
[1] 74.43074
[1] 7.939279
[1] 74.43074
[1] 8.187382
[1] 74.43074
[1] 8.435484
[1] 74.43074
[1] 8.683587
[1] 74.43074
[1] 8.931689
[1] 74.43074
[1] 9.179792
[1] 74.43074
[1] 9.427894
[1] 74.43074
[1] 9.675997
[1] 74.43074
[1] 9.924099
[1] 74.43074
[1] 10.1722
[1] 74.43074
[1] 10.4203
[1] 74.43074
[1] 10.66841
[1] 74.43074
[1] 10.91651
[1] 74.43074
[1] 11.16461
[1] 74.43074
[1] 11.41271
[1] 74.43074
[1] 11.66082
[1] 74.43074
[1] 11.90892
[1] 74.43074
[1] 12.15702
[1] 74.43074
[1] 12.40512
[1] 74.43074
[1] 12.65323
[1] 74.43074
[1] 12.90133
[1] 74.43074
[1] 13.14943
[1] 74.43074
[1] 13.39753
[1] 74.43074
[1] 13.64564
[1] 74.43074
[1] 13.89374
[1] 74.43074
[1] 14.14184
[1] 74.43074
[1] 14.38994
[1] 74.43074
[1] 14.63805
[1] 74.43074
[1] 14.88615
[1] 74.43074
[1] 15.13425
[1] 74.43074
[1] 15.38235
[1] 74.43074
[1] 15.63046
[1] 74.43074
[1] 15.87856
[1] 74.43074
[1] 16.12666
[1] 74.43074
[1] 16.37476
[1] 74.43074
[1] 16.62287
[1] 74.43074
[1] 16.87097
[1] 74.43074
[1] 17.11907
[1] 74.43074
[1] 17.36717
[1] 74.43074
[1] 17.61528
[1] 74.43074
[1] 17.86338
[1] 74.43074
[1] 18.11148
[1] 74.43074
[1] 18.35958
[1] 74.43074
[1] 18.60769
[1] 74.43074
[1] 18.85579
[1] 74.43074
[1] 19.10389
[1] 74.43074
[1] 19.35199
[1] 74.43074
[1] 19.6001
[1] 74.43074
[1] 19.8482
[1] 74.43074
[1] 20.0963
[1] 74.43074
[1] 20.3444
[1] 74.43074
[1] 20.59251
[1] 74.43074
[1] 20.84061
[1] 74.43074
[1] 21.08871
[1] 74.43074
[1] 21.33681
[1] 74.43074
[1] 21.58492
[1] 74.43074
[1] 21.83302
[1] 74.43074
[1] 22.08112
[1] 74.43074
[1] 22.32922
[1] 74.43074
[1] 22.57733
[1] 74.43074
[1] 22.82543
[1] 74.43074
[1] 23.07353
[1] 74.43074
[1] 23.32163
[1] 74.43074
[1] 23.56974
[1] 74.43074
[1] 23.81784
[1] 74.43074
[1] 24.06594
[1] 74.43074
[1] 24.31404
[1] 74.43074
[1] 24.56215
[1] 74.43074
[1] 24.81025
[1] 74.43074
[1] 25.05835
[1] 74.43074
[1] 25.30645
[1] 74.43074
[1] 25.55456
[1] 74.43074
[1] 25.80266
[1] 74.43074
[1] 26.05076
[1] 74.43074
[1] 26.29886
[1] 74.43074
[1] 26.54697
[1] 74.43074
[1] 26.79507
[1] 74.43074
[1] 27.04317
[1] 74.43074
[1] 27.29127
[1] 74.43074
[1] 27.53937
[1] 74.43074
[1] 27.78748
[1] 74.43074
[1] 28.03558
[1] 74.43074
[1] 28.28368
[1] 74.43074
[1] 28.53178
[1] 74.43074
[1] 28.77989
[1] 74.43074
[1] 29.02799
[1] 74.43074
[1] 29.27609
[1] 74.43074
[1] 29.52419
[1] 74.43074
[1] 29.7723
[1] 74.43074
[1] 30.0204
[1] 74.43074
[1] 30.2685
[1] 74.43074
[1] 30.5166
[1] 74.43074
[1] 30.76471
[1] 74.43074
[1] 31.01281
[1] 74.43074
[1] 31.26091
[1] 74.43074
[1] 31.50901
[1] 74.43074
[1] 31.75712
[1] 74.43074
[1] 32.00522
[1] 74.43074
[1] 32.25332
[1] 74.43074
[1] 32.50142
[1] 74.43074
[1] 32.74953
[1] 74.43074
[1] 32.99763
[1] 74.43074
[1] 33.24573
[1] 74.43074
[1] 33.49383
[1] 74.43074
[1] 33.74194
[1] 74.43074
[1] 33.99004
[1] 74.43074
[1] 34.23814
[1] 74.43074
[1] 34.48624
[1] 74.43074
[1] 34.73435
[1] 74.43074
[1] 34.98245
[1] 74.43074
[1] 35.23055
[1] 74.43074
[1] 35.47865
[1] 74.43074
[1] 35.72676
[1] 74.43074
[1] 35.97486
[1] 74.43074
[1] 36.22296
[1] 74.43074
[1] 36.47106
[1] 74.43074
[1] 36.71917
[1] 74.43074
[1] 36.96727
[1] 74.43074
[1] 37.21537
[1] 74.43074
[1] 37.46347
[1] 74.43074
[1] 37.71158
[1] 74.43074
[1] 37.95968
[1] 74.43074
[1] 38.20778
[1] 74.43074
[1] 38.45588
[1] 74.43074
[1] 38.70399
[1] 74.43074
[1] 38.95209
[1] 74.43074
[1] 39.20019
[1] 74.43074
[1] 39.44829
[1] 74.43074
[1] 39.6964
[1] 74.43074
[1] 39.9445
[1] 74.43074
[1] 40.1926
[1] 74.43074
[1] 40.4407
[1] 74.43074
[1] 40.68881
[1] 74.43074
[1] 40.93691
[1] 74.43074
[1] 41.18501
[1] 74.43074
[1] 41.43311
[1] 74.43074
[1] 41.68122
[1] 74.43074
[1] 41.92932
[1] 74.43074
[1] 42.17742
[1] 74.43074
[1] 42.42552
[1] 74.43074
[1] 42.67363
[1] 74.43074
[1] 42.92173
[1] 74.43074
[1] 43.16983
[1] 74.43074
[1] 43.41793
[1] 74.43074
[1] 43.66604
[1] 74.43074
[1] 43.91414
[1] 74.43074
[1] 44.16224
[1] 74.43074
[1] 44.41034
[1] 74.43074
[1] 44.65845
[1] 74.43074
[1] 44.90655
[1] 74.43074
[1] 45.15465
[1] 74.43074
[1] 45.40275
[1] 74.43074
[1] 45.65086
[1] 74.43074
[1] 45.89896
[1] 74.43074
[1] 46.14706
[1] 74.43074
[1] 46.39516
[1] 74.43074
[1] 46.64327
[1] 74.43074
[1] 46.89137
[1] 74.43074
[1] 47.13947
[1] 74.43074
[1] 47.38757
[1] 74.43074
[1] 47.63568
[1] 74.43074
[1] 47.88378
[1] 74.43074
[1] 48.13188
[1] 74.43074
[1] 48.37998
[1] 74.43074
[1] 48.62809
[1] 74.43074
[1] 48.87619
[1] 74.43074
[1] 49.12429
[1] 74.43074
[1] 49.37239
[1] 74.43074
[1] 49.6205
[1] 74.43074
[1] 49.8686
[1] 74.43074
[1] 50.1167
[1] 74.43074
[1] 50.3648
[1] 74.43074
[1] 50.61291
[1] 74.43074
[1] 50.86101
[1] 74.43074
[1] 51.10911
[1] 74.43074
[1] 51.35721
[1] 74.43074
[1] 51.60532
[1] 74.43074
[1] 51.85342
[1] 74.43074
[1] 52.10152
[1] 74.43074
[1] 52.34962
[1] 74.43074
[1] 52.59773
[1] 74.43074
[1] 52.84583
[1] 74.43074
[1] 53.09393
[1] 74.43074
[1] 53.34203
[1] 74.43074
[1] 53.59014
[1] 74.43074
[1] 53.83824
[1] 74.43074
[1] 54.08634
[1] 74.43074
[1] 54.33444
[1] 74.43074
[1] 54.58254
[1] 74.43074
[1] 54.83065
[1] 74.43074
[1] 55.07875
[1] 74.43074
[1] 55.32685
[1] 74.43074
[1] 55.57495
[1] 74.43074
[1] 55.82306
[1] 74.43074
[1] 56.07116
[1] 74.43074
[1] 56.31926
[1] 74.43074
[1] 56.56736
[1] 74.43074
[1] 56.81547
[1] 74.43074
[1] 57.06357
[1] 74.43074
[1] 57.31167
[1] 74.43074
[1] 57.55977
[1] 74.43074
[1] 57.80788
[1] 74.43074
[1] 58.05598
[1] 74.43074
[1] 58.30408
[1] 74.43074
[1] 58.55218
[1] 74.43074
[1] 58.80029
[1] 74.43074
[1] 59.04839
[1] 74.43074
[1] 59.29649
[1] 74.43074
[1] 59.54459
[1] 74.43074
[1] 59.7927
[1] 74.43074
[1] 60.0408
[1] 74.43074
[1] 60.2889
[1] 74.43074
[1] 60.537
[1] 74.43074
[1] 60.78511
[1] 74.43074
[1] 61.03321
[1] 74.43074
[1] 61.28131
[1] 74.43074
[1] 61.52941
[1] 74.43074
[1] 61.77752
[1] 74.43074
[1] 62.02562
[1] 74.43074
[1] 62.27372
[1] 74.43074
[1] 62.52182
[1] 74.43074
[1] 62.76993
[1] 74.43074
[1] 63.01803
[1] 74.43074
[1] 63.26613
[1] 74.43074
[1] 63.51423
[1] 74.43074
[1] 63.76234
[1] 74.43074
[1] 64.01044
[1] 74.43074
[1] 64.25854
[1] 74.43074
[1] 64.50664
[1] 74.43074
[1] 64.75475
[1] 74.43074
[1] 65.00285
[1] 74.43074
[1] 65.25095
[1] 74.43074
[1] 65.49905
[1] 74.43074
[1] 65.74716
[1] 74.43074
[1] 65.99526
[1] 74.43074
[1] 66.24336
[1] 74.43074
[1] 66.49146
[1] 74.43074
[1] 66.73957
[1] 74.43074
[1] 66.98767
[1] 74.43074
[1] 67.23577
[1] 74.43074
[1] 67.48387
[1] 74.43074
[1] 67.73198
[1] 74.43074
[1] 67.98008
[1] 74.43074
[1] 68.22818
[1] 74.43074
[1] 68.47628
[1] 74.43074
[1] 68.72439
[1] 74.43074
[1] 68.97249
[1] 74.43074
[1] 69.22059
[1] 74.43074
[1] 69.46869
[1] 74.43074
[1] 69.7168
[1] 74.43074
[1] 69.9649
[1] 74.43074
[1] 70.213
[1] 74.43074
[1] 70.4611
[1] 74.43074
[1] 70.70921
[1] 74.43074
[1] 70.95731
[1] 74.43074
[1] 71.20541
[1] 74.43074
[1] 71.45351
[1] 74.43074
[1] 71.70162
[1] 74.43074
[1] 71.94972
[1] 74.43074
[1] 72.19782
[1] 74.43074
[1] 72.44592
[1] 74.43074
[1] 72.69403
[1] 74.43074
[1] 72.94213
[1] 74.43074
[1] 73.19023
[1] 74.43074
[1] 73.43833
[1] 74.43074
[1] 73.68644
[1] 74.43074
[1] 73.93454
[1] 74.43074
[1] 74.18264
[1] 74.43074
[1] 74.43074
[1] 74.43074
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 60 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 60 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 61 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 13.328   0.312  19.805 
