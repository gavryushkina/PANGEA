
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2)
> 
> table1 <- read.table('300914_Village_scG_sample1_epi3.log', skip=459, header =T)
> table2 <- read.table('300914_Village_scH_sample1_epi3.log', skip=605, header =T)
> table3 <- read.table('300914_Village_scI_sample1_epi3.log', skip=592, header =T)
> 
> #sorted_origin = sort(origin, decreasing = FALSE)
> #up_index = length(sorted_origin) - ceiling(length(sorted_origin)*0.025)
> #up=sorted_origin[up_index]
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> up1=mean(origin)
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> origin = table2$origin[(burnin+1):size]
> 
> up2=mean(origin)
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> origin = table3$origin[(burnin+1):size]
> 
> up3=mean(origin)
> 
> xmax=max(c(up1,up2,up3))
> 
> step=xmax/300
> 
> size = length(table1$origin)
> burnin = ceiling(size*0.1)
> origin = table1$origin[(burnin+1):size]
> 
> library(coda)
Loading required package: lattice
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table1))
> 
> for (i in 1:5) {
+     rnot[i,] = table1[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split1 <- vector()
> meanrnot_split1 <- vector()
> highrnot_split1 <- vector()
> lowrnot_split1 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split1 <- c(times_split1, current_time)
+     meanrnot_split1 <- c(meanrnot_split1, meanrnot[current_index])
+     highrnot_split1 <- c(highrnot_split1, highrnot[current_index])
+     lowrnot_split1 <- c(lowrnot_split1, lowrnot[current_index])
+     current_time=current_time+step
+     print(current_time)
+     print(up)
+     if (current_time > up) {
+         break
+     }
+ }
[1] 0.2602601
[1] 78.07802
[1] 0.5205201
[1] 78.07802
[1] 0.7807802
[1] 78.07802
[1] 1.04104
[1] 78.07802
[1] 1.3013
[1] 78.07802
[1] 1.56156
[1] 78.07802
[1] 1.82182
[1] 78.07802
[1] 2.08208
[1] 78.07802
[1] 2.342341
[1] 78.07802
[1] 2.602601
[1] 78.07802
[1] 2.862861
[1] 78.07802
[1] 3.123121
[1] 78.07802
[1] 3.383381
[1] 78.07802
[1] 3.643641
[1] 78.07802
[1] 3.903901
[1] 78.07802
[1] 4.164161
[1] 78.07802
[1] 4.424421
[1] 78.07802
[1] 4.684681
[1] 78.07802
[1] 4.944941
[1] 78.07802
[1] 5.205201
[1] 78.07802
[1] 5.465461
[1] 78.07802
[1] 5.725721
[1] 78.07802
[1] 5.985981
[1] 78.07802
[1] 6.246241
[1] 78.07802
[1] 6.506502
[1] 78.07802
[1] 6.766762
[1] 78.07802
[1] 7.027022
[1] 78.07802
[1] 7.287282
[1] 78.07802
[1] 7.547542
[1] 78.07802
[1] 7.807802
[1] 78.07802
[1] 8.068062
[1] 78.07802
[1] 8.328322
[1] 78.07802
[1] 8.588582
[1] 78.07802
[1] 8.848842
[1] 78.07802
[1] 9.109102
[1] 78.07802
[1] 9.369362
[1] 78.07802
[1] 9.629622
[1] 78.07802
[1] 9.889882
[1] 78.07802
[1] 10.15014
[1] 78.07802
[1] 10.4104
[1] 78.07802
[1] 10.67066
[1] 78.07802
[1] 10.93092
[1] 78.07802
[1] 11.19118
[1] 78.07802
[1] 11.45144
[1] 78.07802
[1] 11.7117
[1] 78.07802
[1] 11.97196
[1] 78.07802
[1] 12.23222
[1] 78.07802
[1] 12.49248
[1] 78.07802
[1] 12.75274
[1] 78.07802
[1] 13.013
[1] 78.07802
[1] 13.27326
[1] 78.07802
[1] 13.53352
[1] 78.07802
[1] 13.79378
[1] 78.07802
[1] 14.05404
[1] 78.07802
[1] 14.3143
[1] 78.07802
[1] 14.57456
[1] 78.07802
[1] 14.83482
[1] 78.07802
[1] 15.09508
[1] 78.07802
[1] 15.35534
[1] 78.07802
[1] 15.6156
[1] 78.07802
[1] 15.87586
[1] 78.07802
[1] 16.13612
[1] 78.07802
[1] 16.39638
[1] 78.07802
[1] 16.65664
[1] 78.07802
[1] 16.9169
[1] 78.07802
[1] 17.17716
[1] 78.07802
[1] 17.43742
[1] 78.07802
[1] 17.69768
[1] 78.07802
[1] 17.95794
[1] 78.07802
[1] 18.2182
[1] 78.07802
[1] 18.47846
[1] 78.07802
[1] 18.73872
[1] 78.07802
[1] 18.99898
[1] 78.07802
[1] 19.25924
[1] 78.07802
[1] 19.5195
[1] 78.07802
[1] 19.77976
[1] 78.07802
[1] 20.04002
[1] 78.07802
[1] 20.30028
[1] 78.07802
[1] 20.56054
[1] 78.07802
[1] 20.8208
[1] 78.07802
[1] 21.08106
[1] 78.07802
[1] 21.34132
[1] 78.07802
[1] 21.60159
[1] 78.07802
[1] 21.86185
[1] 78.07802
[1] 22.12211
[1] 78.07802
[1] 22.38237
[1] 78.07802
[1] 22.64263
[1] 78.07802
[1] 22.90289
[1] 78.07802
[1] 23.16315
[1] 78.07802
[1] 23.42341
[1] 78.07802
[1] 23.68367
[1] 78.07802
[1] 23.94393
[1] 78.07802
[1] 24.20419
[1] 78.07802
[1] 24.46445
[1] 78.07802
[1] 24.72471
[1] 78.07802
[1] 24.98497
[1] 78.07802
[1] 25.24523
[1] 78.07802
[1] 25.50549
[1] 78.07802
[1] 25.76575
[1] 78.07802
[1] 26.02601
[1] 78.07802
[1] 26.28627
[1] 78.07802
[1] 26.54653
[1] 78.07802
[1] 26.80679
[1] 78.07802
[1] 27.06705
[1] 78.07802
[1] 27.32731
[1] 78.07802
[1] 27.58757
[1] 78.07802
[1] 27.84783
[1] 78.07802
[1] 28.10809
[1] 78.07802
[1] 28.36835
[1] 78.07802
[1] 28.62861
[1] 78.07802
[1] 28.88887
[1] 78.07802
[1] 29.14913
[1] 78.07802
[1] 29.40939
[1] 78.07802
[1] 29.66965
[1] 78.07802
[1] 29.92991
[1] 78.07802
[1] 30.19017
[1] 78.07802
[1] 30.45043
[1] 78.07802
[1] 30.71069
[1] 78.07802
[1] 30.97095
[1] 78.07802
[1] 31.23121
[1] 78.07802
[1] 31.49147
[1] 78.07802
[1] 31.75173
[1] 78.07802
[1] 32.01199
[1] 78.07802
[1] 32.27225
[1] 78.07802
[1] 32.53251
[1] 78.07802
[1] 32.79277
[1] 78.07802
[1] 33.05303
[1] 78.07802
[1] 33.31329
[1] 78.07802
[1] 33.57355
[1] 78.07802
[1] 33.83381
[1] 78.07802
[1] 34.09407
[1] 78.07802
[1] 34.35433
[1] 78.07802
[1] 34.61459
[1] 78.07802
[1] 34.87485
[1] 78.07802
[1] 35.13511
[1] 78.07802
[1] 35.39537
[1] 78.07802
[1] 35.65563
[1] 78.07802
[1] 35.91589
[1] 78.07802
[1] 36.17615
[1] 78.07802
[1] 36.43641
[1] 78.07802
[1] 36.69667
[1] 78.07802
[1] 36.95693
[1] 78.07802
[1] 37.21719
[1] 78.07802
[1] 37.47745
[1] 78.07802
[1] 37.73771
[1] 78.07802
[1] 37.99797
[1] 78.07802
[1] 38.25823
[1] 78.07802
[1] 38.51849
[1] 78.07802
[1] 38.77875
[1] 78.07802
[1] 39.03901
[1] 78.07802
[1] 39.29927
[1] 78.07802
[1] 39.55953
[1] 78.07802
[1] 39.81979
[1] 78.07802
[1] 40.08005
[1] 78.07802
[1] 40.34031
[1] 78.07802
[1] 40.60057
[1] 78.07802
[1] 40.86083
[1] 78.07802
[1] 41.12109
[1] 78.07802
[1] 41.38135
[1] 78.07802
[1] 41.64161
[1] 78.07802
[1] 41.90187
[1] 78.07802
[1] 42.16213
[1] 78.07802
[1] 42.42239
[1] 78.07802
[1] 42.68265
[1] 78.07802
[1] 42.94291
[1] 78.07802
[1] 43.20317
[1] 78.07802
[1] 43.46343
[1] 78.07802
[1] 43.72369
[1] 78.07802
[1] 43.98395
[1] 78.07802
[1] 44.24421
[1] 78.07802
[1] 44.50447
[1] 78.07802
[1] 44.76473
[1] 78.07802
[1] 45.02499
[1] 78.07802
[1] 45.28525
[1] 78.07802
[1] 45.54551
[1] 78.07802
[1] 45.80577
[1] 78.07802
[1] 46.06603
[1] 78.07802
[1] 46.32629
[1] 78.07802
[1] 46.58655
[1] 78.07802
[1] 46.84681
[1] 78.07802
[1] 47.10707
[1] 78.07802
[1] 47.36733
[1] 78.07802
[1] 47.62759
[1] 78.07802
[1] 47.88785
[1] 78.07802
[1] 48.14811
[1] 78.07802
[1] 48.40837
[1] 78.07802
[1] 48.66863
[1] 78.07802
[1] 48.92889
[1] 78.07802
[1] 49.18915
[1] 78.07802
[1] 49.44941
[1] 78.07802
[1] 49.70967
[1] 78.07802
[1] 49.96993
[1] 78.07802
[1] 50.23019
[1] 78.07802
[1] 50.49045
[1] 78.07802
[1] 50.75071
[1] 78.07802
[1] 51.01097
[1] 78.07802
[1] 51.27123
[1] 78.07802
[1] 51.53149
[1] 78.07802
[1] 51.79175
[1] 78.07802
[1] 52.05201
[1] 78.07802
[1] 52.31227
[1] 78.07802
[1] 52.57253
[1] 78.07802
[1] 52.83279
[1] 78.07802
[1] 53.09305
[1] 78.07802
[1] 53.35331
[1] 78.07802
[1] 53.61357
[1] 78.07802
[1] 53.87383
[1] 78.07802
[1] 54.13409
[1] 78.07802
[1] 54.39435
[1] 78.07802
[1] 54.65461
[1] 78.07802
[1] 54.91487
[1] 78.07802
[1] 55.17513
[1] 78.07802
[1] 55.43539
[1] 78.07802
[1] 55.69565
[1] 78.07802
[1] 55.95591
[1] 78.07802
[1] 56.21617
[1] 78.07802
[1] 56.47643
[1] 78.07802
[1] 56.73669
[1] 78.07802
[1] 56.99695
[1] 78.07802
[1] 57.25721
[1] 78.07802
[1] 57.51747
[1] 78.07802
[1] 57.77773
[1] 78.07802
[1] 58.03799
[1] 78.07802
[1] 58.29825
[1] 78.07802
[1] 58.55851
[1] 78.07802
[1] 58.81877
[1] 78.07802
[1] 59.07903
[1] 78.07802
[1] 59.33929
[1] 78.07802
[1] 59.59955
[1] 78.07802
[1] 59.85981
[1] 78.07802
[1] 60.12007
[1] 78.07802
[1] 60.38033
[1] 78.07802
[1] 60.64059
[1] 78.07802
[1] 60.90085
[1] 78.07802
[1] 61.16111
[1] 78.07802
[1] 61.42137
[1] 78.07802
[1] 61.68163
[1] 78.07802
[1] 61.94189
[1] 78.07802
[1] 62.20215
[1] 78.07802
[1] 62.46241
[1] 78.07802
[1] 62.72267
[1] 78.07802
[1] 62.98293
[1] 78.07802
[1] 63.24319
[1] 78.07802
[1] 63.50345
[1] 78.07802
[1] 63.76371
[1] 78.07802
[1] 64.02397
[1] 78.07802
[1] 64.28423
[1] 78.07802
[1] 64.5445
[1] 78.07802
[1] 64.80476
[1] 78.07802
[1] 65.06502
[1] 78.07802
[1] 65.32528
[1] 78.07802
[1] 65.58554
[1] 78.07802
[1] 65.8458
[1] 78.07802
[1] 66.10606
[1] 78.07802
[1] 66.36632
[1] 78.07802
[1] 66.62658
[1] 78.07802
[1] 66.88684
[1] 78.07802
[1] 67.1471
[1] 78.07802
[1] 67.40736
[1] 78.07802
[1] 67.66762
[1] 78.07802
[1] 67.92788
[1] 78.07802
[1] 68.18814
[1] 78.07802
[1] 68.4484
[1] 78.07802
[1] 68.70866
[1] 78.07802
[1] 68.96892
[1] 78.07802
[1] 69.22918
[1] 78.07802
[1] 69.48944
[1] 78.07802
[1] 69.7497
[1] 78.07802
[1] 70.00996
[1] 78.07802
[1] 70.27022
[1] 78.07802
[1] 70.53048
[1] 78.07802
[1] 70.79074
[1] 78.07802
[1] 71.051
[1] 78.07802
[1] 71.31126
[1] 78.07802
[1] 71.57152
[1] 78.07802
[1] 71.83178
[1] 78.07802
[1] 72.09204
[1] 78.07802
[1] 72.3523
[1] 78.07802
[1] 72.61256
[1] 78.07802
[1] 72.87282
[1] 78.07802
[1] 73.13308
[1] 78.07802
[1] 73.39334
[1] 78.07802
[1] 73.6536
[1] 78.07802
[1] 73.91386
[1] 78.07802
[1] 74.17412
[1] 78.07802
[1] 74.43438
[1] 78.07802
[1] 74.69464
[1] 78.07802
[1] 74.9549
[1] 78.07802
[1] 75.21516
[1] 78.07802
[1] 75.47542
[1] 78.07802
[1] 75.73568
[1] 78.07802
[1] 75.99594
[1] 78.07802
[1] 76.2562
[1] 78.07802
[1] 76.51646
[1] 78.07802
[1] 76.77672
[1] 78.07802
[1] 77.03698
[1] 78.07802
[1] 77.29724
[1] 78.07802
[1] 77.5575
[1] 78.07802
[1] 77.81776
[1] 78.07802
[1] 78.07802
[1] 78.07802
> 
> 
> 
> size = length(table2$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table2$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table2))
> 
> for (i in 1:5) {
+     rnot[i,] = table2[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split2 <- vector()
> meanrnot_split2 <- vector()
> highrnot_split2 <- vector()
> lowrnot_split2 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split2 <- c(times_split2, current_time)
+     meanrnot_split2 <- c(meanrnot_split2, meanrnot[current_index])
+     highrnot_split2 <- c(highrnot_split2, highrnot[current_index])
+     lowrnot_split2 <- c(lowrnot_split2, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> size = length(table3$origin)
> burnin = ceiling(size*0.1)
> 
> origin = table3$origin[(burnin+1):size]
> 
> library(coda)
> 
> origin_mcmc = as.mcmc(origin)
> origin_hpd = HPDinterval(origin_mcmc, prob=0.95)
> 
> #up = origin_hpd[1,2]
> up=mean(origin)
> 
> times <-c(0, up-27, up-24, up-21, up-18, up-15, up-12, up-9, up-6, up-3, up)
> 
> sizeminburnin = size - burnin
> array_size = 5 * sizeminburnin
> rnot <- array(1:array_size, dim=c(5,sizeminburnin))
> 
> current_index = match('rnot1', colnames(table3))
> 
> for (i in 1:5) {
+     rnot[i,] = table3[,current_index][(burnin+1):size]
+     current_index=current_index+1
+ }
> 
> meanrnot <- vector()
> highrnot <- vector()
> lowrnot <- vector()
> 
> for (i in 1:5) {
+     current_rnot = rnot[i,]
+     meanrnot <- c(meanrnot, median(current_rnot))
+     rnot_mcmc = as.mcmc(current_rnot)
+     rnot_hpd = HPDinterval(rnot_mcmc, prob=0.95)
+     highrnot <- c(highrnot, rnot_hpd[1,2])
+     lowrnot <- c(lowrnot, rnot_hpd[1,1])
+ }
> 
> times_split3 <- vector()
> meanrnot_split3 <- vector()
> highrnot_split3 <- vector()
> lowrnot_split3 <- vector()
> 
> current_index=1
> current_time=times[1]
> for (i in 1:300) {
+     if (times[current_index+1]<current_time) {
+         current_index=current_index+1
+     }
+     times_split3 <- c(times_split3, current_time)
+     meanrnot_split3 <- c(meanrnot_split3, meanrnot[current_index])
+     highrnot_split3 <- c(highrnot_split3, highrnot[current_index])
+     lowrnot_split3 <- c(lowrnot_split3, lowrnot[current_index])
+     current_time=current_time+step
+     if (current_time > up) {
+         break
+     }
+ }
> 
> ggplot() + ggtitle("Epidemic 3 sample G1 (declining)")+ geom_errorbar(aes(x = times_split1, y = meanrnot_split1, ymin = lowrnot_split1, ymax = highrnot_split1), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split1, y = meanrnot_split1))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 57 rows containing missing values (geom_point). 
> 
> ggplot() + ggtitle("Epidemic 3 sample H1 (stable)") + geom_errorbar(aes(x = times_split2, y = meanrnot_split2, ymin = lowrnot_split2, ymax = highrnot_split2), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split2, y = meanrnot_split2))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> ggplot()  + ggtitle("Epidemic 3 sample I1 (growing)") + geom_errorbar(aes(x = times_split3, y = meanrnot_split3, ymin = lowrnot_split3, ymax = highrnot_split3), colour = 'grey', width = 0.4)+ geom_point(aes(x = times_split3, y = meanrnot_split3))+xlab("Time since origin of epidemic")+ylab("R0")+ylim(0,5)+xlim(0,xmax)
Warning messages:
1: Removed 1 rows containing missing values (geom_path). 
2: Removed 58 rows containing missing values (geom_point). 
> 
> #qplot(x = grid, y = meanrnot, asp=1)
> #qplot(x = grid, y = highrnot, asp=1)
> #qplot(x = grid, y = lowrnot, asp=1)
> 
> proc.time()
   user  system elapsed 
 15.125   0.321  21.428 
